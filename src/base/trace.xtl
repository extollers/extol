

pred log: Message:
    environ('EXTOL_TRACE', _), !, t(Message); true

pred t: (X: write('trace: '), ti, write_term(X, [quoted(true), max_depth(7)]), nl)

dcg t: (X:
        {write('trace: '), ti, write_term(X, [quoted(true), max_depth(7)]), write(', at: ')},
        peek(A), {pretty_init(A, C), write(C),
        nl}, !)

pred pretty_init: (A, C :
    copy_term(A, AA),
    (length(B, 32), append(B, _, AA) ; B = AA), !,
    prep_chars(B, Q, []),
    length(Q, N),
    (N < 10, !, append(Q, "<eof>", QQ) ; QQ = Q),
    atom_codes(C, QQ))

dcg prep_chars:
([]: []),
([X | Xs]: prep_char(X), prep_chars(Xs))

dcg prep_char:
(X: { var(X) }, !, "<?>"),
(0'\n: !, "<nl>"),
(0'\r: !, "<cr>"),
(0'\t: !, "<tab>"),
(0'<: !, "<lt>"),
(X:
 { ( not integer(X) ; X < 32 ; X > 126), !,
   open_output_codes_stream(S),
   write(S, X),
   close_output_codes_stream(S, C) },
 "<", C, ">", !),
(X: [X])

% Trace and fail
inline
pred 'tf': (X: t(X), fail)

% Trace call
inline
pred 'tc': (F:
          undo(t(failed(F))),
          t(enter(F)),
          ticall(F),
          undo(t(redo(F))),
          t(exit(F)))

% TODO: inline dcg
dcg 'tc': F:
    undo(t(failed(F))),
    t(enter(F)),
    ticall(F),
    undo(t(redo(F))),
    t(exit(F))

% TODO: inline dcg
dcg tc: (F, X):
    undo(t(failed(F))),
    t(enter(F)),
    ticall(F, X),
    undo(t(redo(F))),
    t(exit(F))

% Trace indent

pred ti: (():
    Pat = [0'|, 0' , 0'., 0' , 0'., 0'  | Pat],
    g_read(tindent, I),
    II is I * 2,
    length(L, II),
    append(L, _, Pat),
    atom_codes(S, L),
    write(S))

inline
pred ticall: (G) :
    g_read(tindent, I),
    II is I + 1,
    g_assignb(tindent, II),
    call(G),
    g_assignb(tindent, I)

inline
pred ticall: (G, A, B) :
    g_read(tindent, I),
    II is I + 1,
    g_assignb(tindent, II),
    dcg_call(G, A, B),
    g_assignb(tindent, I)

inline
pred ticall: (G, X, A, B) :
    g_read(tindent, I),
    II is I + 1,
    g_assignb(tindent, II),
    G =... L,
    append(L, [X], LL),
    GX =... LL,
    dcg_call(GX, A, B),
    g_assignb(tindent, I)

pred write_trace_line: X: write('at: '), write_term(X, [numbervars(false), namevars(false), max_depth(6)]), nl

pred throw_with_trace:
    ((traced_exception(Error, Trace), Frame): !, throw(traced_exception(Error, [Frame | Trace]))),
    ((Error, Frame): throw(traced_exception(Error, [Frame])))

pred print_exception:
    (traced_exception(Error, Trace):
        !,
        print_exception(Error),
        maplist(write_trace_line, := reverse(Trace))),
    (Error: write_term(Error, [numbervars(false), namevars(false), max_depth(7)]), nl)

% Explicit stack frame
inline
pred 'sf': (F:
    catch(
        F,
        Exception,
        throw_with_trace(Exception, F)))

inline
pred sf: (A, B): sf call(A, B)

inline
pred sf: (F, I, O): sf call(F, I, O)

pred test_sf1: ((): 'sf'(test_sf2))
pred test_sf2: ((): throw(boop))

test 'trace' :
    skip_test(eval),
    catch('sf'(test_sf1), E, true),
    E = traced_exception(boop,[test_sf1,test_sf2])
