%% Extol

% TODO: path relative to source instead of cwd
pred xtl_include: ((File, Module):
    log(including(File)),
    % sf
    must(xtl_top_level(Module, := read_file(File), [])))

pred xtl_import: ((File, Name, Module):
    log(importing(File, Name)),
    must(Imports := xtlm_imports(Module)),
    % TODO: don't index by name
    ( pmember(Name-Declarations, Imports), !,
        Imported = module(Name, Declarations, Imports)
    ; must(Imported := xtlm_new(Name, Imports)),
        must(xtl_top_level(Imported, := read_file(File), [])),
        must(xtlm_seal(Imported))),
    must(xtlm_import(Module, Imported, inline)),
    log(imports(Imports)))

dcg xtl_token:
    contract(N, callable(N), true),
    (N: N, xtl_skipwhite)

test xtl_token :
    xtl_token("x", "x  ", ""),
    xtl_token("x", "x % comment", ""),
    xtl_token("x", "x % comment\n  \t", "")

dcg xtl_skipwhite:
    ((): xtl_white, !),
    ((): [])

test xtl_skipwhite :
    xtl_skipwhite("", "")

dcg xtl_white:
    ((): "%", !, xtl_line_comment_, xtl_skipwhite),
    ((): (" "; "\t"; "\r" ; "\n" ), !, xtl_skipwhite)

test xtl_white :
    xtl_white(" ", ""),
    xtl_white("%", ""),
    xtl_white("% comment \n\t  ", "")

dcg xtl_line_comment_:
    ((): ("\n" ; eof), !),
    ((): [_], xtl_line_comment_)

% TODO: now takes a Module
dcg xtl_top_level:
    contract((Module), module(Module), module(Module)),
    ((Module):
        {log(parsing_top_level)},
        ( "#!", !, xtl_line_comment_; { true }),
        xtl_skipwhite,
        sf many(xtl_declaration(Module)),
        require(eof))

dcg xtl_declaration:
    contract(Module, module(Module), module(Module)),
    ((_): eof, !, {fail}),
    ((Module):
        sf require(xtl_expression(pexpr(DeclV))), !,
        {log(parsed_expression(DeclV))},
        { DeclV = include(Other), !,
            sf xtl_include(Other, Module)
        ; DeclV = import(Other, Spec), !,
            sf xtl_import(Other, Spec, Module)
        ; !, sf xtl_makevars(DeclV, DeclP, _), !,
             sf xtl_term_to_declaration(DeclP, Decl), !,
             sf xtlm_add(Module, Decl) })

% TODO: @-pattern

% TODO: parse declarations directly instead of parsing terms and converting
pred xtl_term_to_declaration:
    (((test Name : Goal), test(Name, Goal)): !),
    (((pred Name : contract(Head, Requires, Ensures), Clauses), define(Name, [nondet, predicate, parameters(HeadList), requires(Requires), ensures(Ensures)], ClauseList)):
        comma_list(Clauses, ClauseList),
        comma_list(Head, HeadList)),
    (((pred Name : Clauses), define(Name, [nondet, predicate], ClauseList)):
        comma_list(Clauses, ClauseList)),
    (((dcg Name : contract(Head, Requires, Ensures), Clauses), define(Name, [dcg, nondet, predicate, parameters(HeadList), requires(Requires), ensures(Ensures)], ClauseList)):
        comma_list(Clauses, ClauseList),
        comma_list(Head, HeadList)),
    (((dcg Name : Clauses), define(Name, [dcg, nondet, predicate], ClauseList)):
        comma_list(Clauses, ClauseList)),
    (((fun Name : Clauses), define(Name, [nondet], ClauseList)):
        comma_list(Clauses, ClauseList)),
    (((define(Name) : Definition), define(Name, Annots, Clauses)):
        xtl_split_annots(Definition, Annots, Clauses)),
    ((prolog(FN), prolog(FN)): !),
    ((T, _): throw(failed(xtl_term_to_declaration(T))))

pred xtl_split_annots:
    ((Def, Annots, Clauses):
        comma_list(Def, List),
        append(AnnotsRaw, Clauses, List),
        maplist(define_clause, Clauses),
        maplist(xtl_make_annotation, AnnotsRaw, Annots))

fun xtl_make_annotation:
    (Params: parameters(List) if Params =... ['parameters' | List], !),
    (Annot: Annot)

% TODO: rewrite tests using modules
% test xtl_declaration :
%     xtl_declaration(Decl1, "pred f: (x: 1), (y: 2, 3).", ""),
%     Decl1 = ['define'(f, ['nondet', 'predicate'], [(x: 1), (y: (2, 3))])],

%     xtl_declaration(Decl2, "test t: g, h.", ""),
%     Decl2 = ['test'(t, (g,h))],

%     xtl_declaration(Decl3, "define d: dcg, (a : b).", ""),
%     Decl3 = ['define'(d, ['dcg'], [(a : b)])]

pred xtl_makevars:
    ((V, _, _) :
        V := xtl_makevar('_'), !),
    ((V, Var, Vars) :
        V := xtl_makevar(Name), !,
        member(Name-Var, Vars), !),
    ((Atomic, Atomic, _) :
        atomic(Atomic), !),
    (([X|Xs], [Y|Ys], Vars) : !,
        xtl_makevars(X, Y, Vars),
        xtl_makevars(Xs, Ys, Vars)),
    ((In, Out, Vars) :
        In := xtl_apply(Fun, Args), !,
        xtl_makevars(Fun, FunV, Vars),
        xtl_makevars(Args, ArgsV, Vars),
        Out := xtl_apply(FunV, ArgsV))

test xtl_makevars:
    A := xtl_makevar('A'),
    % xtl_makevars(@` foo(@:= A, @:= A), @`foo(1, @:=Z), V),
    xtl_makevars(foo(A, A), foo(1, Z), V),
    atomic(Z),
    Z = 1

dcg xtl_atom_char:
contract((Byte), true, number(Byte)),
(C:
    [C], !,
    { member(C, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$?") })

dcg xtl_atom:
    ((Atom):
        "'",
        xtl_quoted_atom_chars_(Cs),
        { atom_codes(Atom, Cs) }),
    ((AtomVar) :
        many1(xtl_atom_char, Cs), !,
        { atom_codes(Atom, Cs),
            Cs = [C|_],
            ( C = 0'_, !,
                AtomVar := xtl_makevar('_')
            ; member(C, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
                !, AtomVar := xtl_makevar(Atom)
            ; AtomVar = Atom )})

test xtl_atom :
    xtl_atom(a, "'a'", ""),
    xtl_atom('+', "'+'", ""),
    xtl_atom('9', "'\\9'", ""),
    xtl_atom(ab, "ab", ""),
    xtl_atom('ab?', "ab?", ""),
    % 'a.b'
    % 'ab.'
    true

dcg xtl_quoted_char:
% contract((Bytes), true, number(Byte)),
((C) :
    "\\", !,
    require([Quoted]),
    { member(Quoted - C, [
                 0'n - 10,
                 0'r - 13,
                 0't - 9,
                 0'e - 127,
                 AsIs - AsIs
    ]) }, !)

dcg xtl_quoted_atom_chars_:
(([]) : "'", !),
(([C | Cs]) :
    xtl_quoted_char(C), !,
    xtl_quoted_atom_chars_(Cs)),
(([C | Cs]) :
    [C],
    xtl_quoted_atom_chars_(Cs))

dcg xtl_expression: (Expr) :
    xtl_expression(1201, Expr)

fun pexpr: (pexpr(_): true)

dcg xtl_expression:
    % contract((Prec, Expr), number(Prec), true),
    ((Prec, Expr):
        xtl_expression(none, Prec, Expr))

test xtl_expression :
    (xtl_expression(pexpr(1), "1", []),
    xtl_expression(pexpr(a), "a", []),
    xtl_expression(pexpr(a + b), "a + b", []),
    xtl_expression(pexpr(a + (b * c)), "a + b * c", []),
    xtl_expression(pexpr((a * b) + c), "a * b + c", []),
    xtl_expression(pexpr((-a) * b), "-a * b", []),
    xtl_expression(pexpr((:- (a * b))), ":- a * b", []),
    xtl_expression(pexpr('()'), "( )", []),
    xtl_expression(pexpr(':'(x, ':'('()', y))), "x: ((): y)", []),
    xtl_expression(pexpr('.'(a, '.'(b, c('.'('x', 'y'))))), "a.b.c(x.y)", []))

test comma_expr :
    xtl_expression(pexpr((p :- (a, b))), "p :- a, b", [])

dcg xtl_regular_term:
((Char) : "0'", !, require(xtl_string_char(Char)), xtl_skipwhite),
((Integer) :
    many1(digit, Ds), !,
    { foldl(add_digit, 0, Ds, Integer), ! },
    xtl_skipwhite),
((String) : "\"", !, require(many(xtl_string_char, String)), require("\""), xtl_skipwhite),
((Term) :
    xtl_atom(Atom), !,
    ( xtl_token("("), !, % TODO: call with no parens
      xtl_comma_separated(Args, [], xtl_token(")")),
      { Term := xtl_apply( Atom, Args) }
    ; xtl_skipwhite,
      { Term = Atom })),
(('()', ()) :
    xtl_token("("),
    xtl_token(")"), !),
((Term) :
    xtl_token("("),
    xtl_expression(pexpr(Term)),
    require(xtl_token(")"))),
(('{}'(Term)) :
    xtl_token("{"),
    xtl_expression(pexpr(Term)),
    require(xtl_token("}"))),
((Term) :
    xtl_token("["),
    xtl_comma_separated(Term, Tail,
                       ( xtl_token("]"), {Tail=[]}
                       ; xtl_token("|"), xtl_expression(pexpr(Tail)), xtl_token("]"))), !)

dcg xtl_string_char:
contract((Byte), true, byte(Byte)),
((_): "\"", !, { false }),
((C): xtl_quoted_char(C), !),
((C): [C])

test xtl_regular_term :
    xtl_regular_term(123, "123", ""),
    xtl_regular_term(hi, "hi", ""),
    xtl_regular_term(hi(1), "hi(1)", ""),
    xtl_regular_term(hi(b, 4), "hi(b, 4)", ""),
    xtl_regular_term(6, "(6)", ""),
    xtl_regular_term('{}'(x), "{x}", ""),
    xtl_regular_term([], "[]", ""),
    xtl_regular_term([1,2,3], "[1,2,3]", "")

dcg xtl_comma_separated: (As, Tail, End):
    xtl_comma_seperated_first(As, Tail, End)

dcg xtl_comma_seperated_first:
((Tail, Tail, End) :
    End, !),
(([A | As], Tail, End) :
    xtl_expression(1000, pexpr(A)), !,
    xtl_comma_separated_next(As, Tail, End))

dcg xtl_comma_separated_next:
((Tail, Tail, End) :
    End, !),
(([A | As], Tail, End) :
    require(xtl_token(",")), !,
    xtl_expression(1000, pexpr(A)), !,
    xtl_comma_separated_next(As, Tail, End))

dcg xtl_op_or_term:
(('!', term) : "!", xtl_skipwhite),
((X, Info) :
    xtl_regular_term(X), !,
    ( { xtl_op(Prec, Assoc, X), Info = op(Prec, Assoc) }
    ; { Info = term } )),
((X, Info) :
    many1(xtl_op_char, Cs),
    ( xtl_known_op(Cs, X, Prec, Assoc),
      { Info = op(Prec, Assoc) }
    % ; { atom_codes(X, Cs),
    %     Info = term }
    ),
    xtl_skipwhite)

dcg xtl_known_op:
    ((Cs, Op, Prec, Assoc) : { atom_codes(Op, Cs), xtl_op(_, _, Op), !, xtl_op(Prec, Assoc, Op) }),
    ((Cs, Op, Prec, Assoc) : { append(Shorter, [C], Cs) }, append([C]), xtl_known_op(Shorter, Op, Prec, Assoc))

dcg xtl_op_char: (C):
    [C], { member(C, "`~!@#%^&*<>/;:-_=+,|\\.") }, !

dcg xtl_expression:
((none, Prec, pexpr(Term)) :
    xtl_op_or_term(Op, op(OpPrec, Assoc)),
    { member(Assoc-N, [fx-0, fy-1]),
      RightPrec is OpPrec + N },
    try(xtl_expression(none, RightPrec, pexpr(Right))),
    { Combined := xtl_apply(Op, [Right]) },
    xtl_expression(just(Combined), Prec, pexpr(Term))),
((none, Prec, pexpr(Term)) : !,
    require(xtl_op_or_term(Left, term)),
    xtl_expression(just(Left), Prec, pexpr(Term))),
((just(Left), Prec, pexpr(Term)) :
    xtl_op_or_term(Op, op(OpPrec, Assoc)),
    { member(Assoc-N, [xf-0, yf-1]),
      LeftPrec is OpPrec + N,
      LeftPrec < Prec,
      !,
      Combined := xtl_apply( Op, [Left]) },
    xtl_expression(just(Combined), Prec, pexpr(Term))),
((just(Left), Prec, pexpr(Term)) :
    xtl_op_or_term(Op, op(OpPrec, Assoc)),
    { member(Assoc-N-M, [xfx-0-0, xfy-0-1, yfx-1-0]),
      LeftPrec is OpPrec + N,
      LeftPrec < Prec,
      !,
      RightPrec is OpPrec + M },
    require(xtl_expression(none, RightPrec, pexpr(Right))),
    { Combined := xtl_apply( Op, [Left, Right]) },
    xtl_expression(just(Combined), Prec, pexpr(Term))),
% ((just(Term), _, pexpr(Call)) :
%     fail % TODO: non-paren call
%     )
((just(Term), _, pexpr(Term)) : !)

pred xtl_op:
    ((1200, xfx, ':-') : true),
    ((1200, xfx, '-->') : true),
    ((1200, fx, ':-') : true),
    ((1105, xfy, '|') : true),
    ((1100, xfy, ';') : true),
    ((1000, xfy, ',') : true),
    ((900, fy, not) : true),
    ((700, xfx, '=') : true),
    ((700, xfx, '\\=') : true),
    ((700, xfx, '=..') : true),
    ((700, xfx, '==') : true),
    ((700, xfx, '\\==') : true),
    ((700, xfx, 'is') : true),
    ((700, xfx, '<') : true),
    ((700, xfx, '>') : true),
    ((700, xfx, '=<') : true),
    ((700, xfx, '>=') : true),
    ((700, xfx, '=\\=') : true),
    ((500, yfx, '+') : true),
    ((500, yfx, '-') : true),
    ((400, yfx, '*') : true),
    ((400, yfx, '/') : true),
    ((400, yfx, 'rem') : true),
    ((400, yfx, 'mod') : true),
    ((400, yfx, 'div') : true),
    ((400, yfx, '<<') : true),
    ((400, yfx, '>>') : true),
    ((200, xfx, '**') : true),
    ((200, xfx, '^') : true),
    ((200, fy, '+') : true),
    ((200, fy, '-') : true),

    ((1200, fy, test) : true),
    ((999, fx, tc) : true),
    ((999, fx, sf) : true),
    ((700, xfx, '=...') : true),
    ((1200, xfy, ':') : true),
    ((1150, fy, inline) : true),
    ((1150, fy, dcg) : true),
    ((1150, fy, pred) : true),
    ((1150, fy, include) : true),
    ((1150, fy, fun) : true),
    ((1150, fy, define) : true),
    ((700, xfx, ':=') : true),
    ((1125, xfx, 'if') : true),
    ((100, fy, '`') : true),
    ((100, fy, '\\') : true),
    ((100, fy, '@`') : true),
    ((100, fy, '@:=') : true),
    ((700, fx, ':=') : true),
    % ((50, yfx, ' ') : true) % TODO: parenless call
    ((50, xfy, '.') : true)

% TODO: parse_self test
% test parse_self :
%     read_file('main.xtl', Bytes), !,
%     xtl_top_level(_Decls, Bytes, [])

fun xtl_slim_declaration:
(((test _ : _)) : []),
((Decl) : Decl)