%% Extol

pred xtl_include: ((File, DeclsXTL):
    xtl_top_level(DeclsXTL, := read_file(File), [])).

dcg xtl_token:
    contract(N, callable(N), true),
    (N: N, xtl_skipwhite).

test xtl_token :
    xtl_token("x", "x  ", ""),
    xtl_token("x", "x % comment", ""),
    xtl_token("x", "x % comment\n  \t", "").

dcg xtl_skipwhite:
    ((): xtl_white, !),
    ((): []).

test xtl_skipwhite :
    xtl_skipwhite("", "").

dcg xtl_white:
    ((): "%", !, xtl_line_comment_, xtl_skipwhite),
    ((): (" "; "\t"; "\r" ; "\n" ), !, xtl_skipwhite).

test xtl_white :
    xtl_white(" ", ""),
    xtl_white("%", ""),
    xtl_white("% comment \n\t  ", "").

dcg xtl_line_comment_:
    ((): ("\n" ; eof), !),
    ((): [_], xtl_line_comment_).

dcg xtl_top_level:
contract((Decls), true, list(Decls)),
((Declss):
    ( "#!", !, xtl_line_comment_; { true }),
    xtl_skipwhite,
    many(xtl_declaration, Decls),
    { append(Decls, Declss) },
    require(eof)).

pred xtl_declaration:
    ((define(Name, Annots, Clauses)): atom(Name), maplist(annotation, Annots), maplist(define_clause, Clauses)),
    ((test(Name, Goals)): atom(Name), xtl_goal(Goals)).

pred annotation:
    (nondet: true),
    (predicate: true),
    (returns(Var): true),
    (ensures(Pred): xtl_goal(Pred)),
    (requires(Pred): xtl_goal(Pred)),
    (traced: true),
    (dcg: true),
    (parameters(List): maplist(var, List)).

pred xtl_goal: _: true.
pred define_clause: (_: _): true.

dcg xtl_declaration:
contract(Decls, true, maplist(xtl_declaration, Decls)),
((_): eof, !, {fail}),
((Decls):
    xtl_expression(DeclV),
    require(xtl_token(".")), !,
    { DeclV = include(Other), !,
        xtl_include(Other, Decls)
    ; !, xtl_makevars(DeclV, DeclP, _), !,
        xtl_term_to_declaration(DeclP, Decl), !,
        Decls = [Decl] }).

% TODO: @-pattern

% TODO: parse declarations directly instead of parsing terms and converting
pred xtl_term_to_declaration:
    (((test Name : Goal), test(Name, Goal)): !),
    (((pred Name : contract(Head, Requires, Ensures), Clauses), define(Name, [nondet, predicate, parameters(HeadList), requires(Requires), ensures(Ensures)], ClauseList)):
        comma_list(Clauses, ClauseList),
        comma_list(Head, HeadList)),
    (((pred Name : Clauses), define(Name, [nondet, predicate], ClauseList)):
        comma_list(Clauses, ClauseList)),
    (((dcg Name : contract(Head, Requires, Ensures), Clauses), define(Name, [dcg, nondet, predicate, parameters(HeadList), requires(Requires), ensures(Ensures)], ClauseList)):
        comma_list(Clauses, ClauseList),
        comma_list(Head, HeadList)),
    (((dcg Name : Clauses), define(Name, [dcg, nondet, predicate], ClauseList)):
        comma_list(Clauses, ClauseList)),
    (((fun Name : Clauses), define(Name, [nondet], ClauseList)):
        comma_list(Clauses, ClauseList)),
    (((define(Name) : Definition), define(Name, Annots, Clauses)):
        xtl_split_annots(Definition, Annots, Clauses)),
    ((T, _): throw(failed(xtl_term_to_declaration(T)))).

pred xtl_split_annots:
    ((Def, Annots, Clauses):
        comma_list(Def, List),
        append(AnnotsRaw, Clauses, List),
        maplist(define_clause, Clauses),
        maplist(xtl_make_annotation, AnnotsRaw, Annots)).

fun xtl_make_annotation:
    (Params: parameters(List) if Params =... ['parameters' | List], !),
    (Annot: Annot).

test xtl_declaration :
    xtl_declaration(Decl1, "pred f: (x: 1), (y: 2, 3).", ""),
    Decl1 = ['define'(f, ['nondet', 'predicate'], [(x: 1), (y: (2, 3))])],

    xtl_declaration(Decl2, "test t: g, h.", ""),
    Decl2 = ['test'(t, (g,h))],

    xtl_declaration(Decl3, "define d: dcg, (a : b).", ""),
    Decl3 = ['define'(d, ['dcg'], [(a : b)])].

pred xtl_makevars:
    ((V, _, _) :
        V =... ['XTL$VARNAME', '_'], !),
    ((V, Var, Vars) :
        V =... ['XTL$VARNAME', Name], !,
        member(Name-Var, Vars), !),
    ((Atomic, Atomic, _) :
        atomic(Atomic), !),
    (([X|Xs], [Y|Ys], Vars) : !,
        xtl_makevars(X, Y, Vars),
        xtl_makevars(Xs, Ys, Vars)),
    ((In, Out, Vars) :
        In =... InL, !,
        xtl_makevars(InL, OutL, Vars),
        Out =... OutL).

test xtl_makevars :
    A =... ['XTL$VARNAME', 'A'],
    xtl_makevars(foo(A, A), foo(1, Z), V),
    atomic(Z),
    Z = 1.

dcg xtl_atom_char:
contract((Byte), true, number(Byte)),
(C:
    [C], !,
    { member(C, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$?") }).

dcg xtl_atom:
    ((Atom):
        "'",
        xtl_quoted_atom_chars_(Cs),
        { atom_codes(Atom, Cs) }),
    ((AtomVar) :
        many1(xtl_atom_char, Cs), !,
        { atom_codes(Atom, Cs),
            Cs = [C|_],
            ( C = 0'_, !,
                AtomVar =... ['XTL$VARNAME', '_']
            ; member(C, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
                !, AtomVar =... ['XTL$VARNAME', Atom]
            ; AtomVar = Atom )}).

test xtl_atom :
    xtl_atom(a, "'a'", ""),
    xtl_atom('+', "'+'", ""),
    xtl_atom('9', "'\\9'", ""),
    xtl_atom(ab, "ab", ""),
    xtl_atom('ab?', "ab?", "").

dcg xtl_quoted_char:
% contract((Bytes), true, number(Byte)),
((C) :
    "\\", !,
    require([Quoted]),
    { member(Quoted - C, [
                 0'n - 10,
                 0'r - 13,
                 0't - 9,
                 0'e - 127,
                 AsIs - AsIs
    ]) }, !).

dcg xtl_quoted_atom_chars_:
(([]) : "'", !),
(([C | Cs]) :
    xtl_quoted_char(C), !,
    xtl_quoted_atom_chars_(Cs)),
(([C | Cs]) :
    [C],
    xtl_quoted_atom_chars_(Cs)).

dcg xtl_expression: (Expr) :
    xtl_expression(1201, Expr).

dcg xtl_expression:
contract((Prec, Expr), number(Prec), true),
((Prec, Expr):
    xtl_expression(none, Prec, Expr)).

test xtl_expression :
    xtl_expression(1, "1", []),
    xtl_expression(a, "a", []),
    xtl_expression(a + b, "a + b", []),
    xtl_expression(a + (b * c), "a + b * c", []),
    xtl_expression((a * b) + c, "a * b + c", []),
    xtl_expression((-a) * b, "-a * b", []),
    xtl_expression((:- (a * b)), ":- a * b", []),
    xtl_expression('()', "( )", []),
    xtl_expression(':'(x, ':'('()', y)), "x: ((): y)", []).

test comma_expr :
    xtl_expression((p :- (a, b)), "p :- a, b", []).

dcg xtl_regular_term:
((Char) : "0'", !, require(xtl_string_char(Char)), xtl_skipwhite),
((Integer) :
    many1(digit, Ds), !,
    { foldl(add_digit, 0, Ds, Integer), ! },
    xtl_skipwhite),
((String) : "\"", !, require(many(xtl_string_char, String)), require("\""), xtl_skipwhite),
((Term) :
    xtl_atom(Atom), !,
    ( xtl_token("("), !,
      xtl_comma_separated(Args, [], xtl_token(")")),
      { Term =... [Atom | Args] }
    ; xtl_skipwhite,
      { Term = Atom })),
(('()', ()) :
    xtl_token("("),
    xtl_token(")"), !),
((Term) :
    xtl_token("("),
    xtl_expression(Term),
    require(xtl_token(")"))),
(('{}'(Term)) :
    xtl_token("{"),
    xtl_expression(Term),
    require(xtl_token("}"))),
((Term) :
    xtl_token("["),
    xtl_comma_separated(Term, Tail,
                       ( xtl_token("]"), {Tail=[]}
                       ; xtl_token("|"), xtl_expression(Tail), xtl_token("]"))), !).

dcg xtl_string_char:
contract((Byte), true, byte(Byte)),
((_): "\"", !, { false }),
((C): xtl_quoted_char(C), !),
((C): [C]).

test xtl_regular_term :
    xtl_regular_term(123, "123", ""),
    xtl_regular_term(hi, "hi", ""),
    xtl_regular_term(hi(1), "hi(1)", ""),
    xtl_regular_term(hi(b, 4), "hi(b, 4)", ""),
    xtl_regular_term(6, "(6)", ""),
    xtl_regular_term('{}'(x), "{x}", ""),
    xtl_regular_term([], "[]", ""),
    xtl_regular_term([1,2,3], "[1,2,3]", "").

dcg xtl_comma_separated: (As, Tail, End):
    xtl_comma_seperated_first(As, Tail, End).

dcg xtl_comma_seperated_first:
((Tail, Tail, End) :
    End, !),
(([A | As], Tail, End) :
    xtl_expression(1000, A), !,
    xtl_comma_separated_next(As, Tail, End)).

dcg xtl_comma_separated_next:
((Tail, Tail, End) :
    End, !),
(([A | As], Tail, End) :
    require(xtl_token(",")), !,
    xtl_expression(1000, A), !,
    xtl_comma_separated_next(As, Tail, End)).

dcg xtl_op_or_term:
(('!', term) : "!", xtl_skipwhite),
((X, Info) :
    xtl_regular_term(X), !,
    ( { xtl_op(Prec, Assoc, X), Info = op(Prec, Assoc) }
    ; { Info = term } )),
((X, Info) :
    many1(xtl_op_char, Cs),
    ( xtl_known_op(Cs, X, Prec, Assoc),
      { Info = op(Prec, Assoc) }
    % ; { atom_codes(X, Cs),
    %     Info = term }
    ),
    xtl_skipwhite).

dcg xtl_known_op:
    ((Cs, Op, Prec, Assoc) : { atom_codes(Op, Cs), xtl_op(_, _, Op), !, xtl_op(Prec, Assoc, Op) }),
    ((Cs, Op, Prec, Assoc) : { append(Shorter, [C], Cs) }, append([C]), xtl_known_op(Shorter, Op, Prec, Assoc)).

dcg xtl_op_char: (C):
    [C], { member(C, "`~!@#%^&*<>/;:-_=+,|\\.") }, !.

dcg xtl_expression:
((none, Prec, Term) :
    xtl_op_or_term(Op, op(OpPrec, Assoc)),
    { member(Assoc-N, [fx-0, fy-1]),
      RightPrec is OpPrec + N },
    try(xtl_expression(none, RightPrec, Right)),
    { Combined =... [Op, Right] },
    xtl_expression(just(Combined), Prec, Term)),
((none, Prec, Term) : !,
    require(xtl_op_or_term(Left, term)),
    xtl_expression(just(Left), Prec, Term)),
((just(Left), Prec, Term) :
    xtl_op_or_term(Op, op(OpPrec, Assoc)),
    { member(Assoc-N, [xf-0, yf-1]),
      LeftPrec is OpPrec + N,
      LeftPrec < Prec,
      !,
      Combined =... [Op, Left] },
    xtl_expression(just(Combined), Prec, Term)),
((just(Left), Prec, Term) :
    xtl_op_or_term(Op, op(OpPrec, Assoc)),
    { member(Assoc-N-M, [xfx-0-0, xfy-0-1, yfx-1-0]),
      LeftPrec is OpPrec + N,
      LeftPrec < Prec,
      !,
      RightPrec is OpPrec + M },
    require(xtl_expression(none, RightPrec, Right)),
    { Combined =... [Op, Left, Right] },
    xtl_expression(just(Combined), Prec, Term)),
((just(Term), _, Term) : !).

pred xtl_op:
    ((1200, xfx, ':-') : true),
    ((1200, xfx, '-->') : true),
    ((1200, fx, ':-') : true),
    ((1105, xfy, '|') : true),
    ((1100, xfy, ';') : true),
    ((1050, xfy, '->') : true),
    ((1000, xfy, ',') : true),
    ((900, fy, '\\+') : true),
    ((700, xfx, '=') : true),
    ((700, xfx, '\\=') : true),
    ((700, xfx, '=..') : true),
    ((700, xfx, '==') : true),
    ((700, xfx, '\\==') : true),
    ((700, xfx, 'is') : true),
    ((700, xfx, '<') : true),
    ((700, xfx, '>') : true),
    ((700, xfx, '=<') : true),
    ((700, xfx, '>=') : true),
    ((700, xfx, '=\\=') : true),
    ((500, yfx, '+') : true),
    ((500, yfx, '-') : true),
    ((400, yfx, '*') : true),
    ((400, yfx, '/') : true),
    ((400, yfx, 'rem') : true),
    ((400, yfx, 'mod') : true),
    ((400, yfx, 'div') : true),
    ((400, yfx, '<<') : true),
    ((400, yfx, '>>') : true),
    ((200, xfx, '**') : true),
    ((200, xfx, '^') : true),
    ((200, fy, '+') : true),
    ((200, fy, '-') : true),

    ((1200, fy, test) : true),
    ((999, fx, tc) : true),
    ((999, fx, sf) : true),
    ((700, xfx, '=...') : true),
    ((1200, xfy, ':') : true),
    ((1150, fy, dcg) : true),
    ((1150, fy, pred) : true),
    ((1150, fy, include) : true),
    ((1150, fy, fun) : true),
    ((1150, fy, define) : true),
    ((700, xfx, ':=') : true),
    ((1125, xfx, 'if') : true),
    ((100, fy, '`') : true),
    ((700, fx, ':=') : true).

% test parse_self :
%     read_file('main.xtl', Bytes), !,
%     xtl_top_level(_Decls, Bytes, []).

fun xtl_slim_declaration:
(((test _ : _)) : []),
((Decl) : Decl).

%% Modules

pred module: module(Name, Declarations):
    atom(Name),
    (ground(Declarations), !, maplist(module_item, Declarations) ; list_or_partial_list(Declarations)).

pred module_item: (Key - Declaration):
    module_key(Key),
    module_declaration(Declaration).

pred module_key: (Name / N / Type):
    name(Name),
    (number(N) ; member(N, [alias, test, import])),
    member(Type, [alias, test, import, pred, dcg, fun]).

pred module_declaration:
    (import(Module): module(Module)),
    (alias(Name): name(Name)),
    (Declaration: xtl_declaration(Declaration)).

pred name:
    ('.'(A,B): !, atom(A), name(B)),
    (A: atom(A)).

% TODO: store attributes instead of just `/pred'
% TODO: modules should just do name mapping. imports should be centralised
fun xtlm_new: (Name): `module(Name, Imports, Declarations).

pred xtlm_find:
    ((Module, Name/N, pred): xtlm_find_(Module, Name/N/pred)),
    ((Module, Name/N, fun): M is N - 1, xtlm_find_(Module, Name/M/fun)),
    ((Module, Name/N, dcg): M is N - 2, xtlm_find_(Module, Name/M/dcg)).

% TODO: find imports too
pred xtlm_find_: (module(_, _, Declarations), Decl):
    Decl = A-B,
    var(B),
    member(A-B, Declarations),
    \+var(B).

pred xtlm_add: (Module, Declaration):
    Name/N/Type := xtlm_declaration_key(Declaration),
    ( xtlm_find(Module, Name/N/_, Res),
        throw(conflicting_declaration(Name/N))
    ; xtlm_add_(Module, Key, Declaration)).

pred xtlm_add_: (module(_, Declarations), Key, Declaration):
    member(Key-Declaration, Declarations) ; throw(error('xtlm_add_: module is already sealed')).

fun xtlm_declaration_key:
    (pred(Name, _, (Head : _)): `(Name/(:= length(comma_list(Head)))/pred)),
    (fun(Name, _, (Head : _)): `(Name/(:= 1 + length(comma_list(Head)))/pred)),
    (dcg(Name, _, (Head : _)): `(Name/(:= 2 + length(comma_list(Head)))/pred)),
    (test(Name, _): `(Name/test/test)),
    (Other: _ if throw('TODO'(xtlm_Declaration_key(Other)))).

pred xtlm_seal: module(_, Imports, Decls):
    length(Imports, _),
    length(Decls, _).

pred xtlm_import: (Module, Imported):
    Imported = module(Name, Declarations),
    xtlm_add_(Module, Name/import/import, Imported),
    maplist(xtlm_add_alias_(Module, Name), Declarations).

pred xtlm_add_alias_: (Module, Prefix, Declaration):
    Name/N/Type := xtlm_declaration_key(Declaration),
    xtlm_add_(Module, Name/alias/alias, alias('.'(Prefix, Name))).
