%% Extol to Prolog

pred xtl_to_pl_toplevel: (XTL, PL):
    maplist(xtl_to_pl_declaration, XTL, DeclsPL),
    append(DeclsPL, FlatDeclsPL),
    append([
            (:- set_prolog_flag(singleton_warning, off)),
            (:- discontiguous('/'('test', 1))),
            (:- initialization((main;write('error: unexpected failure in main'),nl,halt(1))))
            ], FlatDeclsPL, PL)

pred xtl_to_pl_declaration:
    contract((ModXTL, PL),
        (ModXTL = Mod-XTL, module(Mod), module_declaration(XTL)),
        true),
    ((Mod-XTL, PL):
        log(compiling(XTL, Mod)),
        sf must(xtl_to_pl_declaration(Mod, XTL, PL)))

pred xtl_to_pl_declaration:
    contract((Module, XTL, PL), (module(Module), xtl_declaration(XTL)), true),
    ((_, XTL, _): log(to_pl_declaration(XTL)), false),
    ((Module, (test(Name, XTL)), [(test Name :- PL)]) : !,
        sf xtl_to_pl_goal(Module, XTL, PL),
        numbervars(PL)),
    ((Module, define(Name, [nondet], Clauses), ClausesPL) : !,
        sf maplist(xtl_to_pl_fun(Module, Name), Clauses, ClausesPL),
        numbervars(ClausesPL)),
    ((Module, define(Name, [nondet, predicate | Contract], Defs), Decls) : !,
        ( (Contract = [], ! ; Contract = ['inline']), !,
            sf maplist(xtl_def_to_pl(Module, pred(Name)), Defs, Decls)
        ; atom_concat('__contract_free_', Name, InnerName),
            sf maplist(xtl_def_to_pl(Module, pred(InnerName)), Defs, InnerDecls),
            sf xtl_contract_to_pl(Module, pred, Name, InnerName, Contract, OuterDecls),
            append(OuterDecls, InnerDecls, Decls))),
    ((Module, define(Name, [dcg2, nondet, predicate | Contract], Defs), Decls) : !,
        ( (Contract = [], ! ; Contract = ['inline']), !,
            sf maplist(xtl_def_to_pl(Module, dcg2(Name)), Defs, Decls)
        ; atom_concat('__contract_free_', Name, InnerName),
            sf maplist(xtl_def_to_pl(Module, dcg2(InnerName)), Defs, InnerDecls),
            sf xtl_contract_to_pl(Module, dcg2, Name, InnerName, Contract, OuterDecls),
            append(OuterDecls, InnerDecls, Decls))),
    ((Module, define(Name, Annots, Clauses), DeclsPL):
        AnnotsState := maplist(xtl_annot_prepare, Annots),
        sf xtl_define_clauses_to_params(Clauses, Params),
        NewParams := foldl(xtl_annot_extend_params, Params, AnnotsState),
        (WrapperPL, InnerName) := xtl_annot_wrap(Module, Name, NewParams, AnnotsState),
        sf maplist(xtl_annot_clause_to_pl(Module, InnerName, AnnotsState), Clauses, ClausesPL),
        DeclsPL := append(WrapperPL, ClausesPL)),
    ((_, prolog(F/N), []): !), % TODO: remove
    ((_, X, _) : !, throw(error(unknown_declaration(X))))

test xtl_to_pl_declaration :
    Module := xtlm_new(main),
    xtlm_add(Module, prolog(e/2)),
    xtlm_add(Module, prolog(e/0)),
    xtlm_add(Module, prolog(true/0)),
    xtlm_add(Module, prolog(false/0)),
    xtlm_add(Module, prolog(is/2)),
    xtlm_add(Module, prolog(odd/1)),
    xtlm_add(Module, prolog(b/0)),
    xtlm_add(Module, prolog(c/0)),
    xtlm_add(Module, prolog(g/0)),
    xtlm_add(Module, prolog(h/0)),
    xtlm_add(Module, prolog('+'/3)),
    xtlm_add(Module, prolog('-'/3)),
    xtlm_add(Module, prolog(fib/2)),
    xtlm_add(Module, prolog(f/3)),
    xtlm_add(Module, prolog(call/1)),

    xtl_to_pl_declaration(
        Module,
        define(odd, [nondet, predicate],[
         (0: false),
         (1: true),
         (N: M is N - 2, odd(M))]),
        Res1),
    Res1 = [(odd(0) :- false),
           (odd(1) :- true),
           (odd(NN) :- MM is NN - 2, odd(MM))],

    xtl_to_pl_declaration(Module, define(f, [dcg2, nondet, predicate], [(x: [x])]), Res2),
    Res2 = [(f(x,I,O) :- append([x],O,I))],

    xtl_to_pl_declaration(Module, define(f, [nondet, predicate, parameters([A]), requires(b), ensures(c)], [(d: e)]), Res3),
    Res3 = [
        (f(V3) :- assert(b),
                 '__contract_free_f'(V3),
                 assert(c)),
        ('__contract_free_f'(d) :- e)],

    xtl_to_pl_declaration(Module, define(f, [dcg2, nondet, predicate, parameters([_]), requires(b), ensures(c)], [(d: e)]), Res4),
    Res4 = [
        (f(V4,A,B) :-
             assert(b),
             '__contract_free_f'(V4,A,B),
             assert(c)),
         ('__contract_free_f'(d,C,D) :- e(C,D))],


    xtl_to_pl_declaration(Module, define(f, [nondet, predicate], [((): g, h)]), Res5),
    Res5 = [(f :- g, h)],

    xtl_to_pl_declaration(Module, define(fib, [nondet], [(0 : 1), (1 : 1), (N : fib(N - 1) + fib(N - 2))]), Res6),
    Res6 = [
        (fib(0,1):-true),
        (fib(1,1):-true),
        (fib(A_,B_):-
            '-'(A_,1,C_),
            fib(C_,D_),
            '-'(A_,2,E_),
            fib(E_,F_),
            '+'(D_,F_,B_))],

    xtl_to_pl_declaration(Module, define('undo', ['nondet', 'predicate', 'inline'], [(_ : 'true'), (G: call(G), false)]), Res7),
    Res7 = [
        (undo(_) :- true),
        (undo(_) :- call(_), false)
        ]

pred xtl_def_to_pl:
    ((_, Name, Clause, _): log(compiling_clause(Name, Clause)), fail),
    ((Module, dcg2(Pred), (Head: Body), (HeadPL :- GoalPL)) :
        copy_term(Head-Body, HeadVars-Goal),
        comma_list(HeadVars, HeadArgs),
        append(HeadArgs, [I,O], HeadIO),
        HeadPL =... [Pred | HeadIO],
        xtl_to_pl_dcg(Module, I, O, Goal, GoalPL),
        numbervars(HeadPL-GoalPL)),
    ((Module, pred(Pred), (Head: Body), (HeadPL :- GoalPL)) :
        copy_term(Head-Body, HeadVars-Goal),
        comma_list(HeadVars, HeadArgs),
        HeadPL =... [Pred | HeadArgs],
        xtl_to_pl_goal(Module, Goal, GoalPL),
        numbervars(HeadPL-GoalPL))

pred xtl_to_pl_goal:
    ((_, Var, call(Var)) : % TODO: get rid of extra parenthesis around each clause
        var(Var), !),
    ((Module, (A, B), (APL, BPL), ()) : !, % TODO: get rid of ", ()"
        xtl_to_pl_goal(Module, A, APL),
        xtl_to_pl_goal(Module, B, BPL)),
    ((Module, (A; B), (APL; BPL)) : !,
        xtl_to_pl_goal(Module, A, APL),
        xtl_to_pl_goal(Module, B, BPL)),
    ((_, '!', '!') : !),
    ((Module, prolog$(VarsXTL, VarsPL, Prolog), (ExtraGoals, V=VPL, PL), ()) : !,
        atom_concat(VarsPL, '-(', C1),
        atom_concat(C1, Prolog, C2),
        TermAtom := atom_concat(C2, ').'),
    VPL-PL := read_from_atom(TermAtom),
        xtl_to_pl_quoted(Module, V, VarsXTL, ExtraGoalsList),
        ( comma_list(ExtraGoals, ExtraGoalsList),
            ExtraGoals \= (), !
        ; ExtraGoals = true)),
    ((Module, (Var := Fun), Goal) : !,
        xtl_to_pl_funexpr(Module, Var, Fun, List),
        comma_list(Goal, List)),
    ((Module, G, GPL) :
        G := xtl_apply(Name, Args),
        N := length(Args),
        ( xtlm_find(Module, Name/N/Attributes, Define), !
        ; throw(not_found(pred, Name/N, Module))),
        maplist(xtl_to_pl_quoted(Module), QuotedArgs, Args, ExtraGoalsListList),
        ExtraGoalsList := append(ExtraGoalsListList),
        comma_list(ExtraGoals, ExtraGoalsList),
        MainGoalPL := xtl_to_pl_goal_call(Module, Name, Define, QuotedArgs),
        ( ExtraGoals = (), GPL = MainGoalPL
        ; GPL = (ExtraGoals, MainGoalPL)))

pred xtl_to_pl_goal_call:
    ((Module, _, define(_, Attributes, Clauses), ArgsPL, PL):
        member(inline, Attributes), !,
        % TODO: inline contracts
        ClausesCopy := maplist(copy_term, Clauses),
        maplist(xtl_inline_pred_clause(ArgsPL), ClausesCopy, HeadsPL, Bodies),
        maplist(xtl_to_pl_goal(Module), Bodies, BodiesPL),
        maplist(pl_comma, HeadsPL, BodiesPL, ClausesPL),
        semicolon_list(PL, ClausesPL)),
    ((_, Name, _, QuotedArgs, PL):
        PL =... [Name | QuotedArgs])

fun pl_comma: (A, B): `(A, B)

test xtl_to_pl_goal_call:
    Module := xtlm_new(main),
    xtlm_add(Module, prolog(f/1)),
    xtlm_add(Module, prolog('='/2)),
    xtlm_add(Module, prolog(true/0)),

    Res := xtl_to_pl_goal_call(Module, g, `define(g, [inline], [(1 : true), (Y : f(Y))]), [3]),
    Res = (
        [1] = [3], true ;
        [YY]=[3], f(YY) )

pred xtl_inline_pred_clause: (QuotedArgs, (Head: Body), Match, BodyOut):
    BodyOut = Body,
    comma_list(Head, HeadList),
    Match = (HeadList = QuotedArgs)

test xtl_inline_pred_clause:
    xtl_inline_pred_clause([1, 2], ((A, B): (f(A,B))), H, T),
    H = ([a, b] = [1, 2]),
    T = f(a, b)

pred semicolon_list:
    ((false, []): true),
    (((X ; Xs), [X, Y | Ys]): !, semicolon_list(Xs, [ Y | Ys ])),
    ((X, [X]): true)

test semicolon_list:
    semicolon_list(1, [1]),
    semicolon_list((1; 2), [1, 2]),
    semicolon_list(X, [1, 2]),
    ground(X),
    X = (1; 2),
    semicolon_list((1; 2), Y),
    ground(Y),
    Y = [1, 2]

pred xtl_to_pl_dcg:
    ((_, I, O, Var, dcg_call(Var, I, O)):
        var(Var), !),
    ((M, I, O, (A, B), (APL, BPL), ()) : !,
        xtl_to_pl_dcg(M, I, IO, A, APL),
        xtl_to_pl_dcg(M, IO, O, B, BPL)),
    ((M, I, O, (A; B), (APL; BPL)) : !,
        xtl_to_pl_dcg(M, I, O, A, APL),
        xtl_to_pl_dcg(M, I, O, B, BPL)),
    ((_, I, O, (!), (!, I=O), ()) : !),
    ((_, I, O, [], (I=O)) : !),
    ((_, I, O, [X|XS], append([X|XS], O, I)) : !),
    ((Module, I, O, {G}, (GPL, I=O), ()) : !,
        xtl_to_pl_goal(Module, G, GPL)),
    ((M, I, O, F, C) : !,
        F := xtl_apply( Name, ArgsXtl),
        N := length(ArgsXtl) + 2,
        ( xtlm_find(M, Name/N/_, Define), !,
            maplist(xtl_to_pl_quoted(M), VarsPL, ArgsXtl, ArgsPLs),
            Call := xtl_to_pl_dcg_call(M, Name, Define, VarsPL, I, O),
            append(ArgsPLs, ArgsPL),
            ( ArgsPL = [], !, C = Call
            ; comma_list(PrepPL, ArgsPL),
                C = (PrepPL, Call))
        ; xtlm_find(M, Name/(:= N - 2)/_, _),
            xtl_to_pl_goal(M, F, PL),
            C = (I=O, PL)
        ; throw(not_found(dcg, Name/N)))),
    ((_,_,_,D,_) :
        throw(error(xtl_to_pl_dcg, D)))

test xtl_to_pl_dcg :
    M := xtlm_new(main),
    xtlm_add(M, prolog(f/0)),
    xtlm_add(M, prolog(g/0)),
    xtlm_add(M, prolog(h/0)),
    xtlm_add(M, prolog(e/0)),
    xtlm_add(M, prolog(i/0)),
    xtlm_add(M, prolog(f/2)),
    xtlm_add(M, prolog(g/2)),
    xtlm_add(M, prolog(h/2)),
    xtlm_add(M, prolog(e/2)),
    xtlm_add(M, prolog(i/2)),

    xtl_to_pl_dcg(M, a, c, ((f; g), h), ((f(a, b); g(a, b)), h(b, c))),
    xtl_to_pl_dcg(M, a, e, (e, (f, i; g), h), (e(a, b), (f(b, c), i(c, d); g(b, d)), h(d, e))),
    xtl_to_pl_dcg(M, i, o, V, PL1),
    PL1 == dcg_call(V, i, o),
    xtl_to_pl_dcg(M, i, o, {V}, PL2),
    PL2 == (call(V), i = o)

pred xtl_to_pl_dcg_call:
    ((Module, Name, define(ModName, Attributes, Clauses), ArgsPL, I, O, PL):
        member(inline, Attributes), !,
        ( member(dcg2, Attributes), !,
            ClausesCopy := maplist(copy_term, Clauses),
            maplist(xtl_inline_dcg_clause(ArgsPL), ClausesCopy, HeadsPL, Bodies),
            maplist(xtl_to_pl_dcg(Module, I, O), Bodies, BodiesPL),
            maplist(pl_comma, HeadsPL, BodiesPL, ClausesPL),
            semicolon_list(PL, ClausesPL)
        ; xtl_to_pl_goal_call(Module, Name, define(ModName, Attributes, Clauses), := append(ArgsPL, [I, O]), PL))),
    ((_, Name, _, Args, I, O, PL):
        append([Name | Args], [I,O], LL),
        PL =... LL)

test xtl_to_pl_dcg_call:
    Module := xtlm_new(main),
    xtlm_add(Module, prolog(f/3)),
    xtlm_add(Module, prolog('='/2)),
    xtlm_add(Module, prolog(true/0)),
    xtlm_add(Module, prolog(i/3)),
    xtlm_seal(Module),

    Res := xtl_to_pl_dcg_call(Module, g, `define(g, [inline, dcg2], [(1 : {true}), (Y : f(Y))]), [3], i, o),
    Res = (
        [1]=[3], true, i=o ;
        [x]=[3], f(x,i,o) ),

    Res2 := xtl_to_pl_dcg_call(Module, h, `define(h, [inline], [((X, I, O): i(X, I, O))]), [3], i, o),
    Res2 = ([a, b, c] = [3, i, o], i(a, b, c))


pred xtl_inline_dcg_clause: (QuotedArgs, (Head: Body), Match, BodyOut):
    BodyOut = Body,
    comma_list(Head, HeadList),
    Match = (HeadList = QuotedArgs)

test xtl_inline_dcg_clause:
    xtl_inline_dcg_clause([1, 2], ((A, B): (f(A,B))), H, T),
    H = ([a, b] = [1, 2]),
    T = f(a, b)

pred xtl_contract_to_pl:
    ((Module, pred, Name, InnerName, AnnotsState, [DeclsPL]) :
        % [parameters(ArgsList), requires(Expects), ensures(Ensures)]
        member(parameters(ArgsList), AnnotsState), !,
        (member(requires(Expects), AnnotsState); Expects = true), !,
        (member(ensures(Ensures), AnnotsState); Ensures = true), !,
        Head =... [Name | ArgsList],
        xtl_to_pl_goal(Module, Expects, ExpectsPL),
        xtl_to_pl_goal(Module, Ensures, EnsuresPL),
        Inner =... [InnerName | ArgsList],
        Decls = (Head :-
            assert(Expects),
            Inner,
            assert(Ensures)),
        copy_term(Decls, DeclsPL),
        numbervars(DeclsPL)),
    ((Module, dcg2, Name, InnerName, [parameters(ArgsList), requires(Expects), ensures(Ensures) | Other], Result) :
        % TODO: Other
        append(ArgsList, [_,_], ArgsListIO),
        xtl_contract_to_pl(Module, pred, Name, InnerName, [parameters(ArgsListIO), requires(Expects), ensures(Ensures)], Result))

pred xtl_to_pl_fun:
    ((Module, Name, (Args : Body), (HeadPL :- BodyPL)):
        comma_list(Args, ArgsList),
        Frame =... [Name | ArgsList],
        append(ArgsList, [Result], ArgsPL),
        HeadPL =... [Name | ArgsPL],
        sf xtl_to_pl_funexpr(Module, Result, Body, BodyListPL),
        ( BodyListPL = [],
          BodyPL = true
        ; comma_list(BodyPL, BodyListPL)))

pred xtl_to_pl_funexpr:
    ((_, Var, Var, []): var(Var), !),
    ((Module, Result, (Result if Goal), [PL]):
        !, sf xtl_to_pl_goal(Module, Goal, PL)),
    ((_, Number, Number, []): number(Number), !),
    ((_, Atom, Atom, []): atom(Atom), !),
    ((_, [], [], []): true),
    ((Module, [X | Xs], [Y | Ys], PL):
        sf PL := append(xtl_to_pl_funexpr(Module, X, Y), xtl_to_pl_funexpr(Module, Xs, Ys))),
    ((Module, Res, (`Quoted), PL):
        sf PL := xtl_to_pl_quoted(Module, Res, Quoted)),
    ((Module, Res, (@` Quoted), PL):
        sf PL := xtl_to_pl_xtlquote(Module, Res, Quoted)),
    ((Module, Result, Functor, PL):
        Functor := xtl_apply( Name, ListFun), !,
        N := length(ListFun) + 1,
        ( sf xtlm_find(Module, Name/N/_, _), !
        ; throw(not_found(fun, Name/N))),
        sf maplist(xtl_to_pl_funexpr(Module), Results, ListFun, DepsPLs),
        append(DepsPLs, DepsPL),
        append(Results, [Result], ArgsPL),
        FunctorPL =... [Name | ArgsPL],
        append(DepsPL, [FunctorPL], PL))

test xtl_to_pl_funexpr :
    Module := xtlm_new(main),
    xtlm_add(Module, prolog(f/3)),
    xtlm_add(Module, prolog(g/3)),
    xtlm_add(Module, prolog(fib/2)),
    xtlm_add(Module, prolog('-'/3)),
    xtlm_add(Module, prolog('+'/3)),

    xtl_to_pl_funexpr(Module, res, f(1,g(2,3)), X),
    X = [g(2,3,A),f(1,A,res)],

    xtl_to_pl_funexpr(Module, res, fib(N - 1) + fib(N - 2), Y),
    Y = ['-'(A,1,B),
        fib(B,C),
        '-'(A,2,D),
        fib(D,E),
        '+'(C,E,res)]

pred xtl_to_pl_quoted:
    ((_, Res, Var, []): var(Var), !, Res = Var),
    ((Module, Res, (\ Quoted), Goals): !, xtl_to_pl_quoted(Module, Res, Quoted, Goals)),
    ((Module, Res, (:= Fun), Goals): !, xtl_to_pl_funexpr(Module, Res, Fun, Goals)),
    ((_, Num, Num, []): number(Num), !),
    ((_, Atom, Atom, []): atom(Atom), !),
    ((Module, Res, Term, Goals):
        Term := xtl_apply( Name, Args), !,
        maplist(xtl_to_pl_quoted(Module), ArgsQuoted, Args, Goalss),
        Goals := append(Goalss),
        Res =... [Name | ArgsQuoted])

pred xtl_to_pl_xtlquote:
     ((_, Res, Var, []): var(Var), !, Res := xtl_makevar(Var)),
     ((_, Num, Num, []): number(Num), !),
     ((_, Atom, Atom, []): atom(Atom), !),
     ((Module, Res, (@:= Funexpr), Goals): !,
         xtl_to_pl_funexpr(Module, Res, Funexpr, Goals)),
     ((Module, Res, Term, Goals):
         Term := xtl_apply(Name, Args), !,
         maplist(xtl_to_pl_xtlquote(Module), ArgsQuoted, Args, Goalss),
         Goals := append(Goalss),
         Res := xtl_apply(Name, ArgsQuoted))

pred ':=': (X, G): call(G, X)

fun xtl_define_clauses_to_params:
    ([(Head : Body) | Rest]:
        append(Params, [Result]) if
        List := comma_list(Head),
        N := length(List),
        length(Params, N))

fun xtl_annot_prepare:
    ((Annot): Annot)

fun xtl_annot_extend_params:
    ((Params, predicate):
        NewParams if append(NewParams, [_], Params)),
    ((Params, dcg2): append(Params, [I, O])),
    ((Params, _): Params)

fun xtl_annot_wrap_maybe:
    ((Module, Name, Params, AnnotsState): Ret if
        ( xtl_annot_should_wrap(AnnotsState),
            Ret := xtl_annot_wrap(Module, Name, Params, AnnotsState)
        ; Ret = ([], Name)))

pred xtl_annot_should_wrap:
    ([requires(_) | _]: !),
    ([ensures(_) | _]: !),
    ([_ | Xs]: xtl_annot_should_wrap(Xs))

fun xtl_annot_wrap:
    ((Module, Name, Params, AnnotsState):
        `(Result, (:= InnerName)) if
        InnerName := atom_concat('__wrap_', Name),
        ContractParams = parameters(Params),
        ( member(ContractParams, AnnotsState),
            State = AnnotsState
        ; State = [ContractParams | AnnotsState] ),
        xtl_contract_to_pl(Module, pred, Name, InnerName, State, Result))

% TODO: nondet
pred xtl_annot_clause_to_pl:
    ((Module, Name, AnnotsState, Clauses, ClausesPL):
        ( member(dcg2, AnnotsState), !,
            maplist(xtl_def_to_pl(Module, dcg2(Name)), Clauses, ClausesPL)
        ; member(predicate, AnnotsState), !,
            maplist(xtl_def_to_pl(Module, pred(Name)), Clauses, ClausesPL)
        ; maplist(xtl_to_pl_fun(Module, Name), Clauses, ClausesPL)))

dcg pl_write_top_level:
(([]) : []),
(([Decl | Decls]) :
    pl_write_term(Decl), ".\n",
    pl_write_top_level(Decls))

dcg pl_write_term: (X):
    { open_output_codes_stream(Stream),
      write_term(Stream, X, [quoted(true), namevars(true), numbervars(true), ignore_ops(true)]),
      close_output_codes_stream(Stream, Bytes) },
    Bytes

