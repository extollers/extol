%% Modules

pred module: module(Name, TODO_imports, Declarations):
    atom(Name),
    (ground(Declarations), !, maplist(module_item, Declarations) ; list_or_partial_list(Declarations)).

pred module_item: (Key - Declaration):
    module_key(Key),
    module_declaration(Declaration).

pred module_key: (Name / N / Type):
    name(Name),
    (number(N) ; member(N, [alias, test, import])),
    member(Type, [alias, test, import, pred, dcg, fun]).

pred module_declaration:
    (import(Module): module(Module)),
    (alias(Name): name(Name)),
    (Declaration: xtl_declaration(Declaration)).

pred name:
    ('.'(A,B): !, atom(A), name(B)),
    (A: atom(A)).

% TODO: store attributes instead of just `/pred'
% TODO: modules should just do name mapping. imports should be centralised
fun xtlm_new: (Name): `module(Name, Imports, Declarations).

pred xtlm_find:
    ((Module, Name/N/K): sf xtlm_find_(Module, (Name/N/K)-_)).

% TODO: find imports too
pred xtlm_find_: (module(_, _, Declarations), Decl):
    Decl = A-B,
    var(B),
    member(A-B, Declarations), !,
    \+var(B).

pred xtlm_add: (Module, Declaration):
    Name/N/Type := xtlm_declaration_key(Declaration),
    ( xtlm_find(Module, Name/N/K),
        throw(conflicting_declaration(Name/N,K,Declaration))
    ; xtlm_add_(Module, Name/N/Type, Declaration)).

pred xtlm_add_: (module(_, _, Declarations), Key, Declaration):
    ( member(Key-Declaration, Declarations)
    ; throw(error('xtlm_add_: module is already sealed'))).

pred xtlm_declaration_key:
    ((define(Name, Annots, Clauses), Key):
        !,
	Clauses = [(Head : _) | _],
        ( member(fun, Annots), !,
            Key = (Name/(:= 1 + length(comma_list(Head)))/fun)
        ; member(dcg, Annots), !,
            Key = (Name/(:= 2 + length(comma_list(Head)))/dcg)
        ; !, Key = (Name/(:= length(comma_list(Head)))/pred))),
	    ((test(Name, _), (Name/test/test)): !),
	    ((Other, _): throw(error(unknown_declaration(Other)))).

test xtlm_declaration_key:
    xtlm_declaration_key(define(foo, [fun], [(N: N + 1)]), foo/2/fun).

pred xtlm_seal: module(_, Imports, Decls):
    length(Imports, _),
    length(Decls, _).

pred xtlm_import: (Module, Imported):
    Imported = module(Name, Declarations),
    xtlm_add_(Module, Name/import/import, Imported),
    maplist(xtlm_add_alias_(Module, Name), Declarations).

pred xtlm_add_alias_: (Module, Prefix, Declaration):
    (Name/N/Type) := xtlm_declaration_key(Declaration),
    xtlm_add_(Module, Name/alias/alias, alias('.'(Prefix, Name))).

fun xtlm_all_declarations: (module(_, _, Decls)):
    maplist(snd, Decls).