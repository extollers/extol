%% Modules

pred module: module(Name, Declarations, Imports):
    name(Name)

pred module_item: (Key - Declaration):
    module_key(Key),
    module_declaration(Declaration)

pred module_key: (Name / N / Attributes):
    name(Name),
    (number(N) ; member(N, ['-'])),
    maplist(module_attribute, Attributes)

pred module_attribute: Attribute:
    member(Attribute, [test, pred, dcg2, fun, inline])

pred module_declaration:
    (imported(Module, Name): !, name(Module), name(Name)),
    (prolog(Atom/N): !, atom(Atom), number(N)),
    (Declaration: xtl_declaration(Declaration))

% TODO: uniform representation for names
pred name:
    (name(Ns): maplist(atom, Ns), not length(Ns, 1)),
    (A: atom(A))

pred name_list:
    ((name(Xs), Xs): sf not (Xs = [_]), !),
    ((X, [X]): sf atom(X))

pred concat_name: (A, B, Res):
    Xs := append(name_list(A), name_list(B)),
    name_list(Res, Xs)

test concat_name:
    concat_name(name([]), b, b),
    concat_name(a, b, name([a,b])),
    concat_name(name([a, b]), c, name([a,b,c])),
    concat_name(a, name([b, c]), name([a,b,c])),
    concat_name(name([a, b]), name([c, d]), name([a,b,c,d]))

% TODO: store attributes instead of just `/pred'

pred xtlm_new: (Name, Module):
    %log(new_module(Name)),
    Module = module(Name, Decls, [Name-Decls | _])

pred xtlm_new: (Name, Imports, Module):
    %log(new(Name, := plength(Imports))),
    ( pmember(Name-_, Imports),
        throw(error(already_imported(Name)))
    ; true),
    pinsert(Name-Decls, Imports),
    Module = module(Name, Decls, Imports)

pred xtlm_find:
    ((Module, Name/N/K, Declaration):
        xtlm_find_(Module, (Name/N/K)-DeclarationOrigin),
        copy_term(DeclarationOrigin, Declaration) % TODO: needed?
        )

pred xtlm_find_: (module(_, Declarations, _), Decl):
    pmember(Decl, Declarations)

pred xtlm_add: (Module, Declaration):
    Name/N/Type := xtlm_declaration_key(Declaration),
    ( xtlm_find(Module, Name/N/K, Existing),
        throw(conflicting_declaration(existing(Existing), new(Name/N,K,Declaration)))
    ;
        log(adding_declaration(Name/N/Type)),
        xtlm_add_(Module, Name/N/Type, Declaration))

pred xtlm_add_: (module(_, Declarations, _), Key, Declaration):
    ( pinsert(Key-Declaration, Declarations)
    ; throw(error('xtlm_add_: module is already sealed')))

pred xtlm_declaration_key:
    ((prolog(F/N), F/N/[pred]): true),
    ((define(Name, Annots, Clauses), Key):
        !,
	Clauses = [(Head : _) | _],
        ( member('dcg2', Annots), !,
            comma_list(Head, HeadList),
            length(HeadList, HeadN),
            N is 2 + HeadN,
            Key = (Name/N/['dcg2'])
        ; member(predicate, Annots), !,
            comma_list(Head, HeadList),
            length(HeadList, N),
            Key = (Name/N/['pred'])
        ; !,
            comma_list(Head, HeadList),
            length(HeadList, HeadN),
            N is 1 + HeadN,
            Key = (Name/N/['fun']))),
    ((test(Name, _), (Name/'-'/[test])): !),
    ((Other, _): throw(error(unsuported_declaration(Other))))

test xtlm_declaration_key:
    xtlm_declaration_key(define(foo, [fun], [(N: N + 1)]), foo/2/[fun])

pred xtlm_seal: module(_, Decls, Imports):
    must(length(Decls, _))

pred xtlm_import: (Module, Imported, As):
    must(Imported = module(Name, Declarations, Imports)),
    must(Module = module(_, _, Imports)),
    must(( As = qualified, !, Prefix = Name
        ; As = as(Prefix), !
        ; As = inline, Prefix = name([]))),
    maplist(must(xtlm_add_import_(Module, Prefix, Name)), Declarations)

pred xtlm_add_import_: (Module, Prefix, Import, Key-Declaration):
    must((Name/N/Type) = Key),
    must(NewName := concat_name(Prefix, Name)),
    must(xtlm_add_(Module, NewName/N/Type, imported(Import, Key)))

pred xtlm_zip_module_: (Module, Decl, ModDecl):
    ModDecl = Module-Decl

pred xtl_want_declaration:
    ((true, (test(X, _))): !, false),
    ((_, Decl): xtl_declaration(Decl))

pred xtlm_all_declarations_: (Imports, Slim, Name-DeclPairs, ModOut):
    maplist(snd, DeclPairs, Decls),
    filterlist(xtl_want_declaration(Slim), Decls, Out),
    Module = module(Name, DeclPairs, Imports),
    maplist(xtlm_zip_module_(Module), Out, ModOut)

pred xtlm_all_declarations_recursive: (Module, Slim, ModDecls):
    module(_, _, Imports) = Module,
    length(Imports, _),
    maplist(xtlm_all_declarations_(Imports, Slim), Imports, Declss),
    ( Slim = true, !,
        NoTests = [Module-test(disabled, t(unit_tests_disabled))]
    ; NoTests = []),
    append([NoTests|Declss], ModDecls)

fun xtlm_imports: module(_, _, Imports): Imports

fun xtlm_find_import: (module(_, _, Imports), Name):
    module(Name, Declarations, Imports)
    if pmember(Imports, Name-Declarations)