%% Modules

pred module: module(Name, Declarations, Imports):
    name(Name).

pred module_item: (Key - Declaration):
    module_key(Key),
    module_declaration(Declaration).

pred module_key: (Name / N / Type):
    name(Name),
    (number(N) ; member(N, ['-'])),
    member(Type, [test, imported, pred, dcg, fun]).

pred module_declaration:
    (imported(Module, Name): !, name(Module), name(Name)),
    (Declaration: xtl_declaration(Declaration)).

% TODO: uniform representation for names 
pred name:
    (name(Ns): maplist(atom, Ns), \+length(Ns, 1)),
    (A: atom(A)).

pred name_list:
    ((name(Xs), Xs): \+ (Xs = [_])),
    ((X, [X]): atom(X)).

pred concat_name: (A, B, Res):
    Xs := append(name_list(A), name_list(B)),
    name_list(Res, Xs).

% TODO: store attributes instead of just `/pred'

pred xtlm_new: (Name, Module):
    log(new_module(Name)),
    Module = module(Name, Decls, [Name-Decls | _]).

pred xtlm_new: (Name, Imports, Module):
    log(new(Name, := plength(Imports))),
    ( pmember(Name-_, Imports),
	throw(error(already_imported(Named)))
    ; true),
    pinsert(Name-Decls, Imports),
    Module = module(Name, Decls, Imports).

pred xtlm_find:
    ((Module, Name/N/K): sf xtlm_find_(Module, (Name/N/K)-_)).

pred xtlm_find_: (module(_, Declarations, _), Decl):
    pmember(Decl, Declarations).

pred xtlm_add: (Module, Declaration):
    Name/N/Type := xtlm_declaration_key(Declaration),
    ( xtlm_find(Module, Name/N/K),
        throw(conflicting_declaration(Name/N,K,Declaration))
    ; xtlm_add_(Module, Name/N/Type, Declaration)).

pred xtlm_add_: (module(_, Declarations, _), Key, Declaration):
    ( pinsert(Key-Declaration, Declarations)
    ; throw(error('xtlm_add_: module is already sealed'))).

pred xtlm_declaration_key:
    ((define(Name, Annots, Clauses), Key):
        !,
	Clauses = [(Head : _) | _],
        ( member(fun, Annots), !,
            Key = (Name/(:= 1 + length(comma_list(Head)))/fun)
        ; member(dcg, Annots), !,
            Key = (Name/(:= 2 + length(comma_list(Head)))/dcg)
        ; !, Key = (Name/(:= length(comma_list(Head)))/pred))),
	    ((test(Name, _), (Name/test/test)): !),
	    ((Other, _): throw(error(unsuported_declaration(Other)))).

test xtlm_declaration_key:
    xtlm_declaration_key(define(foo, [fun], [(N: N + 1)]), foo/2/fun).

pred xtlm_seal: module(_, Decls, Imports):
    must(length(Decls, _)).

pred xtlm_import: (Module, Imported, As):
    must(Imported = module(Name, Declarations, Imports)),
    must(Module = module(_, _, Imports)),
    must(( As = qualified, !, Prefix = Name
        ; As = as(Prefix), !
        ; As = inline, Prefix = name([]))),
    maplist(must(xtlm_add_import_(Module, Prefix, Name)), Declarations).

pred xtlm_add_import_: (Module, Prefix, Import, Key-Declaration):
    must((Name/N/Type) = Key),
    must(NewName := concat_name(Prefix, Name)),
    must(xtlm_add_(Module, NewName/N/Type, imported(Import, Name))).

pred xtlm_zip_module_: (Module, Decl, ModDecl):
    ModDecl = Module-Decl.

pred xtlm_all_declarations_: (Imports, Name-DeclPairs, ModOut):
    maplist(snd, DeclPairs, Decls),
    filterlist(xtl_declaration, Decls, Out),
    Module = module(Name, DeclPairs, Imports),
    maplist(xtlm_zip_module_(Module), Out, ModOut).

pred xtlm_all_declarations_recursive: (module(_, _, Imports), ModDecls):
    length(Imports, _),
    maplist(xtlm_all_declarations_(Imports), Imports, Declss),
    append(Declss, ModDecls).

fun xtlm_imports: module(_, _, Imports): Imports.