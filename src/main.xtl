include 'src/toolkit/prolog.xtl'
include 'src/toolkit/trace.xtl'
include 'src/toolkit/parsing.xtl'
include 'src/toolkit/misc.xtl'
include 'src/toolkit/streams.xtl'
include 'src/toolkit/getopts.xtl'

include 'src/extol/ast.xtl'
include 'src/extol/parse.xtl'
include 'src/extol/compile.xtl'
include 'src/extol/modules.xtl'
include 'src/extol/eval.xtl'

%% Main

pred main : ():
    catch((
            current_prolog_flag(argv, CommandArgs),
            ( CommandArgs = [_, Command | Args], !,
                command(Command, Args),
                halt
            ; command(help, []),
                halt(1))),
        Exception, (
            write('failed: '),
            print_exception(Exception),
            halt(1)))

pred command:
    ((help, _) : !,
        write('extol repl'), nl,
        write('    Invoke the interactive REPL'), nl,
        write('extol extoltoprolog <in.xtl> <out.pl> [--slim] [--inject <other.xtl>]...'), nl,
        write('    Convert the input for to prolog. Use "--slim" to remove tests for bootstrapping'), nl,
        write('extol test [test-name]'), nl,
        write('    Run all built-in unit tests or, if present, just the named test'), nl,
        write('extol eval-tests <in.xtl> [test-name]'), nl,
        write('    Eval all tests or, if present, just the named test'), nl,
        write('extol eval "expression" [--load <path>]...'), nl,
        write('    Load the given files, evaluate the expression and print its result'), nl
        ),
    ((test, Args) : !,
        (   test((Name :- Goals)),
            ([Name] = Args ; Args = []),
            write('[  ] + '), write(Name), write(': '),
            once(run_test(Goals)),
            fail
        ;
            true)),
    ((extoltoprolog, Args) : !,
        getopts(Args, [
                multi('--inject', Injects),
                multi('--inject-prolog', InjectsProlog),
                flag('--slim', Slim),
                argument(In, required),
                argument(Out, required)
                ]), !,
        Module := load_main(In, Injects),
        must(xtlm_all_declarations_recursive(Module, Slim, ModDeclsXTL)),
        log(listed(:= length(ModDeclsXTL))),
        log(decls_new(ModDeclsXTL)),
        must(xtl_to_pl_toplevel(ModDeclsXTL, DeclsPL)),
        log(translated(:=length(DeclsPL))),
        must(pl_write_top_level(DeclsPL, BytesGen, [])), !,
        maplist(read_file, InjectsProlog, InjectsPrologContents),
        must(append(["% Generated by extoltoprolog\n", BytesGen | InjectsPrologContents], BytesOut)),
        must(write_file(Out, BytesOut))),
    (('eval-tests', [File]): !,
        % TODO: eval-tests (eunit) doesn't pass
        Main := load_main(File, []), !,
        must(xtlm_all_declarations_recursive(Main, true, ModDecls)), !,
        eval_tests(ModDecls)),
    ((repl, []): !, xtl_repl),
    ((eval, Args): !,
        getopts(Args, [
                argument(Expression, required),
                multi('--load', Files)
                ]),
        xtl_command_eval(Files, Expression)),
    ((Command, _): write(unknown_command(Command)), nl, false)

pred eval_tests: (ModDecls):
    maplist(eval_test_decl, ModDecls)

pred eval_test_decl:
    ((Module-test(Name, Test)): !,
        write('[ E] + '), write(Name), write(': '),
        eval_test(Module, Test)),
    ((X): true)

pred eval_test:
    ((_, done): !, write(success), nl),
    ((_, Skip): Skip = (skip_test(eval), _), !, write(skip), nl),
    ((Module, Pair): Pair = (A, B), !, log(eval_test_goal(A)),
        ( xtl_eval_goal(Module, A), !, eval_test(Module, B)
        ; nl, write('  failed: '), write_term(A, [numbervars(false), namevars(false), max_depth(7)]), nl, fail)),
    ((Module, Goal): eval_test(Module, (Goal, done)))

pred load_injects:
    (([], _): true),
    (([Path | Rest], Module):
        must(xtl_include(Path, Module)),
        load_injects(Rest, Module))

pred load_main: (Path, Injects, Module):
    Module := xtlm_new(main),
    xtl_include_prelude(Module), !,
    log('revving'),
    load_injects(Injects, Module),
    must(xtl_include(Path, Module)),
    must(xtlm_seal(Module)),
    log('parsed')

pred skip_test: (_): true % TODO

pred run_test:
    ((done) : !, write(success), nl),
    ((skip_test(compiled)) : !, write(skip), nl),
    (((A, B), ()) : !,
        ( sf(A), !,
            run_test(B)
        ; nl, write('  failed: '), write_term(A, [numbervars(false), namevars(false), max_depth(7)]), nl,
            throw(test_failed))),
    ((B) :
        run_test((B, done)))

pred xtl_repl: ():
    Module := xtlm_new(repl),
    xtl_include_prelude(Module), !,
    xtl_repl(Module)

pred xtl_repl:
    ((Module):
        write('Extol> '), flush_output, read_line(Line),
        ( Line = [0'\n]
        ; Line = [], write('end'), halt
        ; catch((
                ( xtl_expression(pexpr(ExpV), Line, [])
                ; throw('parse failed')),
                    xtl_makevars(ExpV, Exp, Vars),
                    xtl_eval_funexpr(Module, Exp, Result),
                    write(Result), nl
                    ),
                Exception,
                ( write('failed: '), print_exception(Exception)))
        ; write(error),
            nl),
        !, xtl_repl(Module)),
    ((_): write('end'), nl)

pred xtl_command_eval_include: (Module, Path):
    xtl_include(Path, Module)

pred xtl_command_eval: (Files, Expression):
    Module := xtlm_new(eval),
    xtl_include_prelude(Module), !,
    maplist(xtl_command_eval_include(Module), Files),
    atom_codes(Expression, String),
    xtl_expression(pexpr(ExpV), String, []),
    xtl_makevars(ExpV, Exp, _),
    xtl_eval_funexpr(Module, Exp, Result),
    write(Result), nl

% TODO inject prelude
pred xtl_include_prelude: (Module):
    log('TODO including prelude'),
    xtl_include('/home/atnnn/code/extol/src/prelude/prelude.xtl', Module),
    log(Module)