import('src/base/trace.xtl', 'trace').
import('src/base/misc.xtl', misc).
import('src/base/parsing.xtl', parsing).
import('src/base/streams.xtl', streams).
import('src/extol/parse.xtl', extol_parse).
import('src/extol/compile.xtl', extol_compile).
import('src/extol/modules.xtl', extol_modules).

%% Main

pred main : ():
    catch((
            current_prolog_flag(argv, CommandArgs),
            ( CommandArgs = [_, Command | Args], !,
                command(Command, Args),
                halt
            ; command(help, []),
                halt(1))),
        Exception, (
            write('failed: '),
            print_exception(Exception),
            halt(1))).

pred command:
    ((help, _) :
        write('extol repl'), nl,
        write('    Invoke the interactive REPL'), nl,
        write('extol extoltoprolog <in.xtl> <out.pl> [--slim]'), nl,
        write('    Convert the input for to prolog. Use "--sim" to remove tests for bootstrapping'), nl,
        write('extol test [test-name]'), nl,
        write('    Run all tests or, if present, just the named test'), nl
        ),
    ((test, Args) :
        (   test((Name :- Goals)),
            ([Name] = Args ; Args = []),
            write('[ ] '), write(Name), write(': '),
            once(run_test(Goals)),
            fail
        ;
            true)),
    ((extoltoprolog, [In, Out | Flags]) :
        Module := xtlm_new(main), % TODO what to name the default module?
        log('revving'),
        must(xtl_include(In, Module)),
        must(xtlm_seal(Module)),
        log('parsed'),
        must(xtlm_all_declarations_recursive(Module, ModDeclsXTL)),
        log(listed(:= length(ModDeclsXTL))),
        (member('--slim', Flags), Slim = true, ! ; Slim = false),
        log(decls_new(ModDeclsXTL)),
        must(xtl_to_pl_toplevel(ModDeclsXTL, DeclsPL)),
        log(translated(:=length(DeclsPL))),
        must(pl_write_top_level(DeclsPL, BytesGen, [])), !,
        must(append("% Generated by extoltoprolog\n", BytesGen, BytesOut)),
        must(write_file(Out, BytesOut))),
    ((repl, []): xtl_repl),
    ((Command, _): write(unknown_command(Command)), nl, false).

pred run_test:
    ((done) : !, write(success), nl),
    (((A, B), ()) : !,
        (sf(A)
            -> !, run_test(B)
        ; nl, write('  failed: '), write_term(A, [numbervars(false), namevars(false), max_depth(6)]), nl, throw(test_failed))),
            ((B) :
                run_test((B, done))).

pred xtl_repl:
    (():
        Module := xtlm_new(repl),
        write('Extol> '), flush_output, read_line(Line),
        ( Line = [0'\n]
        ; Line = [], write('end'), halt
        ; catch((
                ( xtl_expression(ExpV, Line, [])
                ; throw('parse failed')),
                    xtl_makevars(ExpV, Exp, Vars),
                    xtl_to_pl_funexpr(Module, Result, Exp, ExpPL),
                    comma_list(GoalPL, ExpPL),
                    (GoalPL = (); call(GoalPL)),
                    write(Result), nl
                    ),
                Exception,
                ( write('failed: '), print_exception(Exception)))
        ; write(error), nl),
            !, xtl_repl),
        ((): write('end'), nl).
