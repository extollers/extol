include 'src/base/trace.xtl'.
include 'src/base/misc.xtl'.
include 'src/base/parsing.xtl'.
include 'src/base/streams.xtl'.
include 'src/extol/parse.xtl'.
include 'src/extol/compile.xtl'.

%% Main

pred main : ():
    catch((
            current_prolog_flag(argv, CommandArgs),
            ( CommandArgs = [_, Command | Args], !,
                command(Command, Args),
                halt
            ; command(help, []),
                halt(1))),
        Exception, (
            write('failed: '),
            print_exception(Exception),
            halt(1))).

pred command:
    ((help, _) :
        write('extol repl'), nl,
        write('    Invoke the interactive REPL'), nl,
        write('extol extoltoprolog <in.xtl> <out.pl> [--slim]'), nl,
        write('    Convert the input for to prolog. Use "--sim" to remove tests for bootstrapping'), nl,
        write('extol test [test-name]'), nl,
        write('    Run all tests or, if present, just the named test'), nl
        ),
    ((test, Args) :
        (   test((Name :- Goals)),
            ([Name] = Args ; Args = []),
            write('    '), write(Name), write('... '),
            once(run_test(Goals)),
            fail
        ; true)),
    ((extoltoprolog, [In, Out | Flags]) :
        xtl_include(In, DeclsXTL), !,
        (member('--slim', Flags), Slim = true, ! ; Slim = false),
        ( Slim,
            maplist(xtl_slim_declaration, DeclsXTL, DeclsSlim),
            append(DeclsSlim, DeclsXTLNew)
        ; DeclsXTL = DeclsXTLNew),
        xtl_to_pl_toplevel(DeclsXTLNew, DeclsPL),
        pl_write_top_level(DeclsPL, BytesGen, []), !,
        append("% Generated by extoltoprolog\n", BytesGen, BytesOut),
        write_file(Out, BytesOut)),
    ((repl, []): xtl_repl),
    ((Command, _): write(unknown_command(Command)), nl, false).

pred run_test:
    ((done) : !, write(success), nl),
    (((A, B), ()) : !,
        (sf(A)
            -> !, run_test(B)
        ; nl, write('  failed: '), write_term(A, [numbervars(false), namevars(false)]), nl, throw(test_failed))),
    ((B) :
        run_test((B, done))).

pred xtl_repl:
    ((): write('Extol> '), flush_output, read_line(Line),
    ( Line = [0'\n]
    ; catch((
        ( xtl_expression(ExpV, Line, [])
        ; throw('parse failed')),
        xtl_makevars(ExpV, Exp, Vars),
        
        xtl_to_pl_funexpr(Result, Exp, ExpPL),
        comma_list(GoalPL, ExpPL),
        (GoalPL = (); call(GoalPL)),
        write(Result), nl
      ), Exception, (
        write('failed: '), print_exception(Exception)
      ))
    ; write(error), nl),
    !, xtl_repl),
    ((): write('end'), nl).
