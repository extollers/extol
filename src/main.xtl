% TODO: for bootstrapping
pred builtin_load_builtins: module(_, Decls, _):
    member((('+'/3/pred)-prolog('+'/3)), Decls)

include 'src/base/prolog.xtl'
include 'src/base/trace.xtl'
include 'src/base/parsing.xtl'
include 'src/base/misc.xtl'
include 'src/base/streams.xtl'
include 'src/extol/parse.xtl'
include 'src/extol/compile.xtl'
include 'src/extol/modules.xtl'
include 'src/extol/eval.xtl'

%% Main

pred main : ():
    catch((
            current_prolog_flag(argv, CommandArgs),
            ( CommandArgs = [_, Command | Args], !,
                command(Command, Args),
                halt
            ; command(help, []),
                halt(1))),
        Exception, (
            write('failed: '),
            print_exception(Exception),
            halt(1)))

pred command:
    ((help, _) :
        write('extol repl'), nl,
        write('    Invoke the interactive REPL'), nl,
        write('extol extoltoprolog <in.xtl> <out.pl> [--slim]'), nl,
        write('    Convert the input for to prolog. Use "--sim" to remove tests for bootstrapping'), nl,
        write('extol test [test-name]'), nl,
        write('    Run all tests or, if present, just the named test'), nl,
        write('extol eval "expression"'), nl,
        write('    Evaluate the expression and print it\'s result'), nl
        ),
    ((test, Args) :
        (   test((Name :- Goals)),
            ([Name] = Args ; Args = []),
            write('[ ] + '), write(Name), write(': '),
            once(run_test(Goals)),
            fail
        ;
            true)),
    ((extoltoprolog, [In, Out | Flags]) :
        Module := xtlm_new(main), % TODO what to name the default module?
        log('revving'),
        must(xtl_include(In, Module)),
        must(xtlm_seal(Module)),
        log('parsed'),
        must(xtlm_all_declarations_recursive(Module, ModDeclsXTL)),
        log(listed(:= length(ModDeclsXTL))),
        log(decls_new(ModDeclsXTL)),
        must(xtl_to_pl_toplevel(ModDeclsXTL, DeclsPL)),
        log(translated(:=length(DeclsPL))),
        must(pl_write_top_level(DeclsPL, BytesGen, [])), !,
        must(append("% Generated by extoltoprolog\n", BytesGen, BytesOut)),
        must(write_file(Out, BytesOut))),
    ((repl, []): xtl_repl),
    ((eval, [Expression]): xtl_command_eval(Expression)),
    ((Command, _): write(unknown_command(Command)), nl, false)

pred run_test:
    ((done) : !, write(success), nl),
    (((A, B), ()) : !,
        ( sf(A), !,
            run_test(B)
        ; nl, write('  failed: '), write_term(A, [numbervars(false), namevars(false), max_depth(7)]), nl,
            throw(test_failed))),
    ((B) :
        run_test((B, done)))

pred xtl_repl: ():
    Module := xtlm_new(repl),
    builtin_load_builtins(Module), !,
    xtl_repl(Module)

pred xtl_repl:
    ((Module):
        write('Extol> '), flush_output, read_line(Line),
        ( Line = [0'\n]
        ; Line = [], write('end'), halt
        ; catch((
                ( xtl_expression(pexpr(ExpV), Line, [])
                ; throw('parse failed')),
                    xtl_makevars(ExpV, Exp, Vars),
                    xtl_eval_funexpr(Module, Exp, Result),
                    write(Result), nl
                    ),
                Exception,
                ( write('failed: '), print_exception(Exception)))
        ; write(error),
            nl),
        !, xtl_repl(Module)),
    ((_): write('end'), nl)

pred xtl_command_eval: Expression:
    Module := xtlm_new(eval),
    builtin_load_builtins(Module), !,
    atom_codes(Expression, String),
    xtl_expression(pexpr(ExpV), String, []),
    xtl_makevars(ExpV, Exp, _),
    xtl_eval_funexpr(Module, Exp, Result),
    write(Result), nl