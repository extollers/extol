
%% C preprocessor

dcg c_pp: (Env, Tokens):
    c_pp_lines(Lines), eof, !,
    { c_pp_eval(Env, Lines, Tokens, []) }.

dcg c_pp_lines:
    (([]): eof, !),
    (([Line | Lines]): c_pp_line(Line), !, c_pp_lines(Lines)).

dcg c_pp_line:
    (([]): c_pp_skipwhite, ("\n", ! ; eof), !),
    (([Token | Tokens]): c_pp_skipwhite, !, c_pp_token(Token), !, c_pp_line(Tokens)).

dcg c_pp_skipwhite:
    ((): c_pp_white, !),
    ((): []).

dcg c_pp_white:
    ((): "//", !, c_pp_line_comment_),
    ((): "/*", !, c_pp_block_comment_, c_pp_skipwhite),
    ((): (" "; "\t"; "\r" ; "\\\r\n" ; "\\\n"), !, c_pp_skipwhite).

dcg c_pp_line_comment_:
    ((): (peek([0'\n | _]) ; eof), !),
    ((): c_pp_white, !, c_pp_line_comment_),
    ((): [_], !, c_pp_line_comment_).

dcg c_pp_block_comment_:
    ((): "*/", !),
    ((): [_], c_pp_block_comment_).

dcg c_pp_token: (Token): (c_pp_operator(Token) ; c_pp_symbol(Token) ; c_pp_integer(Token)), !.

pred c_pp_operator: (operator(Token), Next, Rest):
    member(Op, [
               "=",
               "#", ";"
    ]),
    append(Op, Rest, Next),
    atom_codes(Token, Op).

dcg c_pp_symbol: (symbol(Name)): c_pp_symbol_chars(Cs), { atom_codes(Name, Cs) }.

dcg c_pp_symbol_chars: ([X | Xs]): c_pp_symbol_first(X), !, many(c_pp_symbol_char, Xs).

dcg c_pp_symbol_first:
    ((C): alpha(C), !),
    ((0'_): "_").

dcg c_pp_symbol_char: (C): c_pp_symbol_first(C); [C], { member(C, "0123456789") }.

pred add_digit: (N, D, R):
    member(D, [0,1,2,3,4,5,6,7,8,9]),
    ( var(N), N is R div D; true),
    R is N * 10 + D.

dcg c_pp_integer: (integer(N)):
    many1(digit, Ds), !,
    { foldl(add_digit, 0, Ds, N) }.

dcg c_pp_eval:
    ((_, []): eof, !),
    ((EnvA, [Line | Lines]):
        c_pp_eval_line(EnvA, EnvB, Line), !,
        c_pp_eval(EnvB, Lines)).

dcg c_pp_eval_line:
    ((Env, [Name = Value | Env], [operator('#'), symbol('define'), symbol(Name) | Value]): !),
    ((Env, Env, []): !),
    ((Env, Env, [symbol(X) | Xs]):
        { member(X = Ys, Env), !, append(Ys, Xs, Zs) },
        c_pp_eval_line(Env, Env, Zs)),
    ((Env, Env, [X | Xs]):
        [X],
        c_pp_eval_line(Env, Env, Xs)).

%% C

dcg c_top_level: (Decls): many(c_declaration, Decls), eof.

dcg c_declaration: (declare(Name, Type, Value)):
    c_type(Type),
    [symbol(Name)],
    ( [operator('=')],
      c_value(Assign), !,
      { Value = value(Assign) }
    ; { Value = none } ),
    [operator(';')].

dcg c_type: (Type): [symbol(Type)].

dcg c_value:
    ((variable(Name)): [symbol(Name)]),
    ((integer(N)): [integer(N)]).

test 'test_c' :
    read_file('test.c', Bytes), !,
    c_pp([], Tokens, Bytes, []), !,
    c_top_level(Decls, Tokens, []),
    Decls = [
        declare(x,int,value(integer(437))),
        declare(y,int,none),
        declare(z,int,value(integer(1))),
        declare(k,int,value(integer(2)))
        ].