%% Extol to Prolog

pred xtl_to_pl_toplevel: (XTL, PL):
    maplist(must(xtl_to_pl_declaration), XTL, DeclsPL),
    append(DeclsPL, FlatDeclsPL),
    append([
            (:- set_prolog_flag(singleton_warning, off)),
            (:- discontiguous('/'('test', 1))),
            (:- initialization((main;write('error: unexpected failure in main'),nl,halt(1))))
            ], FlatDeclsPL, PL).

% prolog xtl_to_pl_declaration(XTL, PL) :- t(to_pl_declaration(XTL)), false.

pred xtl_to_pl_declaration:
    contract((XTL, PL), xtl_declaration(XTL), true),
    (((test(Name, XTL)), [(test Name :- PL)]) : !,
        xtl_to_pl_goal(XTL, PL),
        numbervars(PL)),
    ((define(Name, [nondet], Clauses), ClausesPL) : !,
        maplist(xtl_to_pl_fun(Name), Clauses, ClausesPL),
        numbervars(ClausesPL)),
    ((define(Name, [nondet, predicate | Contract], Defs), Decls) : !,
        ( Contract = [],
            maplist(xtl_def_to_pl(pred(Name)), Defs, Decls)
        ; atom_concat('__contract_free_', Name, InnerName),
            maplist(xtl_def_to_pl(pred(InnerName)), Defs, InnerDecls),
            xtl_contract_to_pl(pred, Name, InnerName, Contract, OuterDecls),
            append(OuterDecls, InnerDecls, Decls))),
    ((define(Name, [dcg, nondet, predicate | Contract], Defs), Decls) : !,
        ( Contract = [],
            maplist(xtl_def_to_pl(dcg(Name)), Defs, Decls)
        ; atom_concat('__contract_free_', Name, InnerName),
            maplist(xtl_def_to_pl(dcg(InnerName)), Defs, InnerDecls),
            xtl_contract_to_pl(dcg, Name, InnerName, Contract, OuterDecls),
            append(OuterDecls, InnerDecls, Decls))),
    ((X, _) : !, throw(error(unknown_declaration(X)))).

test xtl_to_pl_declaration :
    xtl_to_pl_declaration(
        define(odd, [nondet, predicate],[
         (0: false),
         (1: true),
         (N: M is N - 2, odd(M))]),
        Res1),
    Res1 = [(odd(0) :- false),
           (odd(1) :- true),
           (odd(NN) :- MM is NN - 2, odd(MM))],

    xtl_to_pl_declaration(define(f, [dcg, nondet, predicate], [(x: [x])]), Res2),
    Res2 = [(f(x,I,O) :- append([x],O,I))],

    xtl_to_pl_declaration(define(f, [nondet, predicate, parameters(a), requires(b), ensures(c)], [(d: e)]), Res3),
    Res3 = [
        (f(a) :- assert(b),
                 '__contract_free_f'(a),
                 assert(c)),
        ('__contract_free_f'(d) :- e)],

    xtl_to_pl_declaration(define(f, [dcg, nondet, predicate, parameters(a), requires(b), ensures(c)], [(d: e)]), Res4),
    Res4 = [
        (f(a,A,B) :-
             assert(b),
             '__contract_free_f'(a,A,B),
             assert(c)),
        ('__contract_free_f'(d,A,B) :- e(A,B))],

    xtl_to_pl_declaration(define(f, [nondet, predicate], [((): g, h)]), Res5),
    Res5 = [(f :- g, h)],

    xtl_to_pl_declaration(define(fib, [nondet], [(0 : 1), (1 : 1), (N : fib(N - 1) + fib(N - 2))]), Res6),
    Res6 = [
        (fib(0,1):-true),
        (fib(1,1):-true),
        (fib(A,B):-
            '-'(A,1,C),
            fib(C,D),
            '-'(A,2,E),
            fib(E,F),
            '+'(D,F,B))].

pred xtl_def_to_pl:
    ((dcg(Pred), (Head: Body), (HeadPL :- GoalPL)) :
        copy_term(Head-Body, HeadVars-Goal),
        comma_list(HeadVars, HeadArgs),
        append(HeadArgs, [I,O], HeadIO),
        HeadPL =... [Pred | HeadIO],
        xtl_to_pl_dcg(Goal, GoalPL, I, O),
        numbervars(HeadPL-GoalPL)),
    ((pred(Pred), (Head: Body), (HeadPL :- GoalPL)) :
        copy_term(Head-Body, HeadVars-Goal),
        comma_list(HeadVars, HeadArgs),
        HeadPL =... [Pred | HeadArgs],
        xtl_to_pl_goal(Goal, GoalPL),
        numbervars(HeadPL-GoalPL)).

pred xtl_to_pl_goal:
    ((Var, call(Var)) : % TODO: get rid of extra parenthesis around each clause
        var(Var), !),
    (((A, B), (APL, BPL), ()) : !, % TODO: get rid of ", ()"
        xtl_to_pl_goal(A, APL),
        xtl_to_pl_goal(B, BPL)),
    (((A; B), (APL; BPL)) : !,
        xtl_to_pl_goal(A, APL),
        xtl_to_pl_goal(B, BPL)),
    (((A -> B ; C), (APL -> BPL ; CPL)) : !,
        xtl_to_pl_goal(A, APL),
        xtl_to_pl_goal(B, BPL),
        xtl_to_pl_goal(C, CPL)),
    (((A -> B), (APL -> BPL)) : !,
        xtl_to_pl_goal(A, APL),
        xtl_to_pl_goal(B, BPL)),
    (('!', '!') : !),
    (((Var := Fun), Goal) : !,
        xtl_to_pl_funexpr(Var, Fun, List),
        comma_list(Goal, List)),
    ((G, GPL) :
        G =... [Name | Args],
        maplist(xtl_to_pl_quoted, QuotedArgs, Args, ExtraGoalsListList),
        ExtraGoalsList := append(ExtraGoalsListList),
        comma_list(ExtraGoals, ExtraGoalsList),
        MainGoalPL =... [Name | QuotedArgs],
        ( ExtraGoals = (), GPL = MainGoalPL
        ; GPL = (ExtraGoals, MainGoalPL))).

pred xtl_to_pl_dcg:
    ((Var, dcg_call(Var, I, O), I, O) :
        var(Var), !),
    (((A, B), (APL, BPL), I, O) : !,
        xtl_to_pl_dcg(A, APL, I, IO),
        xtl_to_pl_dcg(B, BPL, IO, O)),
    (((A; B), (APL; BPL), I, O) : !,
        xtl_to_pl_dcg(A, APL, I, O),
        xtl_to_pl_dcg(B, BPL, I, O)),
    (((!), (!, I=O), I, O) : !),
    (([], (I=O), I, O) : !),
    (([X|XS], append([X|XS], O, I), I, O) : !),
    (({G}, (GPL, I=O), I, O) : !,
        xtl_to_pl_goal(G, GPL)),
    ((F, C, I, O) : !,
        F =... L,
        append(L, [I,O], LL),
        C =... LL),
    ((D,_,_,_) :
        throw(error(xtl_to_pl_dcg, D))).

test xtl_to_pl_dcg :
    xtl_to_pl_dcg(((f; g), h), ((f(a, b); g(a, b)), h(b, c)), a, c),
    xtl_to_pl_dcg((e, (f, i; g), h), (e(a, b), (f(b, c), i(c, d); g(b, d)), h(d, e)), a, e),
    xtl_to_pl_dcg(V, PL1, i, o),
    PL1 == dcg_call(V, i, o),
    xtl_to_pl_dcg({V}, PL2, i, o),
    PL2 == (call(V), i = o).

pred xtl_contract_to_pl:
    ((pred, Name, InnerName, [parameters(Args), requires(Expects), ensures(Ensures)], [DeclsPL]) :
        comma_list(Args, ArgsList),
        Head =... [Name | ArgsList],
        xtl_to_pl_goal(Expects, ExpectsPL),
        xtl_to_pl_goal(Ensures, EnsuresPL),
        Inner =... [InnerName | ArgsList],
        Decls = (Head :-
            assert(Expects),
            Inner,
            assert(Ensures)),
        copy_term(Decls, DeclsPL),
        numbervars(DeclsPL)),
    ((dcg, Name, InnerName, [parameters(Args), requires(Expects), ensures(Ensures)], Result) :
        comma_list(Args, ArgsList),
        append(ArgsList, [_,_], ArgsListIO),
        comma_list(ArgsIO, ArgsListIO),
        xtl_contract_to_pl(pred, Name, InnerName, [parameters(ArgsIO), requires(Expects), ensures(Ensures)], Result)).

pred xtl_to_pl_fun:
    ((Name, (Args : Body), (HeadPL :- BodyPL)):
        comma_list(Args, ArgsList),
        Frame =... [Name | ArgsList],
        append(ArgsList, [Result], ArgsPL),
        HeadPL =... [Name | ArgsPL],
        xtl_to_pl_funexpr(Result, Body, BodyListPL),
        ( BodyListPL = [],
          BodyPL = true
        ; comma_list(BodyPL, BodyListPL))).

pred xtl_to_pl_funexpr:
    ((Var, Var, []): var(Var), !),
    ((Result, (Result if Goal), [PL]):
        !, xtl_to_pl_goal(Goal, PL)),
    ((Number, Number, []): number(Number), !),
    ((Atom, Atom, []): atom(Atom), !),
    (([], [], []): true),
    (([X | Xs], [Y | Ys], PL):
        PL := append(xtl_to_pl_funexpr(X, Y), xtl_to_pl_funexpr(Xs, Ys))),
    ((Res, (`Quoted), PL):
        PL := xtl_to_pl_quoted(Res, Quoted)),
    ((Result, Functor, PL): compound(Functor), !,
        Functor =... [Name | ListFun],
        maplist(xtl_to_pl_funexpr, Results, ListFun, DepsPLs),
        append(DepsPLs, DepsPL),
        append(Results, [Result], ArgsPL),
        FunctorPL =... [Name | ArgsPL],
        append(DepsPL, [FunctorPL], PL)).

test xtl_to_pl_funexpr :
    xtl_to_pl_funexpr(res, f(1,g(2,3)), X),
    X = [g(2,3,A),f(1,A,res)],

    xtl_to_pl_funexpr(res, fib(N - 1) + fib(N - 2), Y),
    Y = ['-'(A,1,B),
        fib(B,C),
        '-'(A,2,D),
        fib(D,E),
        '+'(C,E,res)].

pred xtl_to_pl_quoted:
    ((Res, Var, []): var(Var), !, Res = Var),
    ((Res, (:= Fun), Goals): !, xtl_to_pl_funexpr(Res, Fun, Goals)),
    ((Num, Num, []): number(Num), !),
    ((Atom, Atom, []): atom(Atom), !),
    ((Res, Term, Goals):
        compound(Term), !,
        Term =... [Name | Args],
        maplist(xtl_to_pl_quoted, ArgsQuoted, Args, Goalss),
        Goals := append(Goalss),
        Res =... [Name | ArgsQuoted]).

pred ':=': (X, G): call(G, X).